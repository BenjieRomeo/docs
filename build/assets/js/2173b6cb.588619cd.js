(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{156:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return _}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),o=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=o(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=o(a),p=n,_=u["".concat(l,".").concat(p)]||u[p]||d[p]||b;return a?r.a.createElement(_,i(i({ref:t},s),{},{components:a})):r.a.createElement(_,i({ref:t},s))}));function _(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,l=new Array(b);l[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var s=2;s<b;s++)l[s]=a[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"},84:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return o}));var n=a(3),r=a(7),b=(a(0),a(156)),l={title:"zts_net_info_t",custom_edit_url:null},i={unversionedId:"autogen/libzt/classes/structzts__net__info__t",id:"autogen/libzt/classes/structzts__net__info__t",isDocsHomePage:!1,title:"zts_net_info_t",description:"More...",source:"@site/docs/autogen/libzt/classes/structzts__net__info__t.md",sourceDirName:"autogen/libzt/classes",slug:"/autogen/libzt/classes/structzts__net__info__t",permalink:"/autogen/libzt/classes/structzts__net__info__t",editUrl:null,version:"current",frontMatter:{title:"zts_net_info_t",custom_edit_url:null}},c=[{value:"Public Attributes",id:"public-attributes",children:[]},{value:"Detailed Description",id:"detailed-description",children:[]},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable net_id",id:"variable-net_id",children:[]},{value:"variable mac",id:"variable-mac",children:[]},{value:"variable name",id:"variable-name",children:[]},{value:"variable status",id:"variable-status",children:[]},{value:"variable type",id:"variable-type",children:[]},{value:"variable mtu",id:"variable-mtu",children:[]},{value:"variable dhcp",id:"variable-dhcp",children:[]},{value:"variable bridge",id:"variable-bridge",children:[]},{value:"variable broadcast_enabled",id:"variable-broadcast_enabled",children:[]},{value:"variable port_error",id:"variable-port_error",children:[]},{value:"variable netconf_rev",id:"variable-netconf_rev",children:[]},{value:"variable assigned_addr_count",id:"variable-assigned_addr_count",children:[]},{value:"variable assigned_addrs",id:"variable-assigned_addrs",children:[]},{value:"variable route_count",id:"variable-route_count",children:[]},{value:"variable routes",id:"variable-routes",children:[]},{value:"variable multicast_sub_count",id:"variable-multicast_sub_count",children:[]},{value:"variable adi",id:"variable-adi",children:[]},{value:"variable multicast_subs",id:"variable-multicast_subs",children:[]}]}],s={toc:c};function o(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,Object(b.b)("a",{parentName:"p",href:"#detailed-description"},"More...")),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"#include <ZeroTierSockets.h>")),Object(b.b)("h2",{id:"public-attributes"},"Public Attributes"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"Name"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"uint64_t"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-net_id"},"net_id")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"uint64_t"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-mac"},"mac")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"char"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-name"},"name")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("a",{parentName:"td",href:"/autogen/libzt/files/_zero_tier_sockets_8h#enum-zts_network_status_t"},"zts_network_status_t")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-status"},"status")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("a",{parentName:"td",href:"/autogen/libzt/files/_zero_tier_sockets_8h#enum-zts_net_info_type_t"},"zts_net_info_type_t")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-type"},"type")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"unsigned int"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-mtu"},"mtu")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"int"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-dhcp"},"dhcp")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"int"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-bridge"},"bridge")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"int"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-broadcast_enabled"},"broadcast_enabled")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"int"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-port_error"},"port_error")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"unsigned long"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-netconf_rev"},"netconf_rev")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"unsigned int"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-assigned_addr_count"},"assigned_addr_count")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"struct ",Object(b.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__sockaddr__storage"},"zts_sockaddr_storage")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-assigned_addrs"},"assigned_addrs")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"unsigned int"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-route_count"},"route_count")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__route__info__t"},"zts_route_info_t")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-routes"},"routes")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"unsigned int"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-multicast_sub_count"},"multicast_sub_count")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"uint32_t"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-adi"},"adi")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"struct zts_net_info_t::@0"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},Object(b.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t#variable-multicast_subs"},"multicast_subs")))))),Object(b.b)("h2",{id:"detailed-description"},"Detailed Description"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"struct zts_net_info_t;\n")),Object(b.b)("p",null,"Virtual network configuration "),Object(b.b)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),Object(b.b)("h3",{id:"variable-net_id"},"variable net_id"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"uint64_t net_id;\n")),Object(b.b)("p",null,"64-bit ZeroTier network ID "),Object(b.b)("h3",{id:"variable-mac"},"variable mac"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"uint64_t mac;\n")),Object(b.b)("p",null,"Ethernet MAC (48 bits) that should be assigned to port "),Object(b.b)("h3",{id:"variable-name"},"variable name"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"char name;\n")),Object(b.b)("p",null,"Network name (from network configuration master) "),Object(b.b)("h3",{id:"variable-status"},"variable status"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"zts_network_status_t status;\n")),Object(b.b)("p",null,"Network configuration request status "),Object(b.b)("h3",{id:"variable-type"},"variable type"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"zts_net_info_type_t type;\n")),Object(b.b)("p",null,"Network type "),Object(b.b)("h3",{id:"variable-mtu"},"variable mtu"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"unsigned int mtu;\n")),Object(b.b)("p",null,"Maximum interface MTU "),Object(b.b)("h3",{id:"variable-dhcp"},"variable dhcp"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"int dhcp;\n")),Object(b.b)("p",null,"If nonzero, the network this port belongs to indicates DHCP availability"),Object(b.b)("p",null,"This is a suggestion. The underlying implementation is free to ignore it for security or other reasons. This is simply a netconf parameter that means 'DHCP is available on this network.' "),Object(b.b)("h3",{id:"variable-bridge"},"variable bridge"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"int bridge;\n")),Object(b.b)("p",null,"If nonzero, this port is allowed to bridge to other networks"),Object(b.b)("p",null,"This is informational. If this is false (0), bridged packets will simply be dropped and bridging won't work. "),Object(b.b)("h3",{id:"variable-broadcast_enabled"},"variable broadcast_enabled"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"int broadcast_enabled;\n")),Object(b.b)("p",null,"If nonzero, this network supports and allows broadcast (ff:ff:ff:ff:ff:ff) traffic "),Object(b.b)("h3",{id:"variable-port_error"},"variable port_error"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"int port_error;\n")),Object(b.b)("p",null,"If the network is in PORT_ERROR state, this is the (negative) error code most recently reported "),Object(b.b)("h3",{id:"variable-netconf_rev"},"variable netconf_rev"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"unsigned long netconf_rev;\n")),Object(b.b)("p",null,"Revision number as reported by controller or 0 if still waiting for config "),Object(b.b)("h3",{id:"variable-assigned_addr_count"},"variable assigned_addr_count"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"unsigned int assigned_addr_count;\n")),Object(b.b)("p",null,"Number of assigned addresses "),Object(b.b)("h3",{id:"variable-assigned_addrs"},"variable assigned_addrs"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"struct zts_sockaddr_storage assigned_addrs;\n")),Object(b.b)("p",null,"ZeroTier-assigned addresses (in sockaddr_storage structures)"),Object(b.b)("p",null,"For IP, the port number of the sockaddr_XX structure contains the number of bits in the address netmask. Only the IP address and port are used. Other fields like interface number can be ignored."),Object(b.b)("p",null,"This is only used for ZeroTier-managed address assignments sent by the virtual network's configuration master. "),Object(b.b)("h3",{id:"variable-route_count"},"variable route_count"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"unsigned int route_count;\n")),Object(b.b)("p",null,"Number of ZT-pushed routes "),Object(b.b)("h3",{id:"variable-routes"},"variable routes"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"zts_route_info_t routes;\n")),Object(b.b)("p",null,"Routes (excluding those implied by assigned addresses and their masks) "),Object(b.b)("h3",{id:"variable-multicast_sub_count"},"variable multicast_sub_count"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"unsigned int multicast_sub_count;\n")),Object(b.b)("p",null,"Number of multicast groups subscribed "),Object(b.b)("h3",{id:"variable-adi"},"variable adi"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"uint32_t adi;\n")),Object(b.b)("h3",{id:"variable-multicast_subs"},"variable multicast_subs"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-cpp"},"struct zts_net_info_t::@0 multicast_subs;\n")),Object(b.b)("p",null,"Multicast groups to which this network's device is subscribed "),Object(b.b)("hr",null),Object(b.b)("p",null,"Updated on 22 April 2021 at 15:16:44 PDT"))}o.isMDXComponent=!0}}]);