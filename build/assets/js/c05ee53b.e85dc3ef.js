(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{130:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return _})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),i=(n(0),n(156)),b={title:"include/ZeroTierSockets.h",custom_edit_url:null},l={unversionedId:"autogen/libzt/files/_zero_tier_sockets_8h",id:"autogen/libzt/files/_zero_tier_sockets_8h",isDocsHomePage:!1,title:"include/ZeroTierSockets.h",description:"More...",source:"@site/docs/autogen/libzt/files/_zero_tier_sockets_8h.md",sourceDirName:"autogen/libzt/files",slug:"/autogen/libzt/files/_zero_tier_sockets_8h",permalink:"/autogen/libzt/files/_zero_tier_sockets_8h",editUrl:null,version:"current",frontMatter:{title:"include/ZeroTierSockets.h",custom_edit_url:null},sidebar:"docsSidebar",previous:{title:"Classes",permalink:"/autogen/libztcore/index_classes"},next:{title:"Classes",permalink:"/autogen/libzt/index_classes"}},_=[{value:"Classes",id:"classes",children:[]},{value:"Types",id:"types",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Defines",id:"defines",children:[]},{value:"Detailed Description",id:"detailed-description",children:[]},{value:"Types Documentation",id:"types-documentation",children:[{value:"enum zts_error_t",id:"enum-zts_error_t",children:[]},{value:"enum zts_event_t",id:"enum-zts_event_t",children:[]},{value:"enum zts_errno_t",id:"enum-zts_errno_t",children:[]},{value:"enum zts_network_status_t",id:"enum-zts_network_status_t",children:[]},{value:"enum zts_net_info_type_t",id:"enum-zts_net_info_type_t",children:[]},{value:"enum zts_peer_role_t",id:"enum-zts_peer_role_t",children:[]},{value:"typedef zts_socklen_t",id:"typedef-zts_socklen_t",children:[]},{value:"typedef zts_in_addr_t",id:"typedef-zts_in_addr_t",children:[]},{value:"typedef zts_in_port_t",id:"typedef-zts_in_port_t",children:[]},{value:"typedef zts_sa_family_t",id:"typedef-zts_sa_family_t",children:[]},{value:"typedef zts_ip_mreq",id:"typedef-zts_ip_mreq",children:[]},{value:"typedef zts_ipv6_mreq",id:"typedef-zts_ipv6_mreq",children:[]},{value:"typedef zts_fd_set",id:"typedef-zts_fd_set",children:[]},{value:"typedef zts_timeval",id:"typedef-zts_timeval",children:[]},{value:"typedef zts_nfds_t",id:"typedef-zts_nfds_t",children:[]},{value:"typedef zts_ip_addr",id:"typedef-zts_ip_addr",children:[]}]},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function zts_central_set_access_mode",id:"function-zts_central_set_access_mode",children:[]},{value:"function zts_central_set_verbose",id:"function-zts_central_set_verbose",children:[]},{value:"function zts_central_clear_resp_buf",id:"function-zts_central_clear_resp_buf",children:[]},{value:"function zts_central_init",id:"function-zts_central_init",children:[]},{value:"function zts_central_cleanup",id:"function-zts_central_cleanup",children:[]},{value:"function zts_central_get_last_resp_buf",id:"function-zts_central_get_last_resp_buf",children:[]},{value:"function zts_central_status_get",id:"function-zts_central_status_get",children:[]},{value:"function zts_central_self_get",id:"function-zts_central_self_get",children:[]},{value:"function zts_central_net_get",id:"function-zts_central_net_get",children:[]},{value:"function zts_central_net_update",id:"function-zts_central_net_update",children:[]},{value:"function zts_central_net_delete",id:"function-zts_central_net_delete",children:[]},{value:"function zts_central_net_get_all",id:"function-zts_central_net_get_all",children:[]},{value:"function zts_central_member_get",id:"function-zts_central_member_get",children:[]},{value:"function zts_central_member_update",id:"function-zts_central_member_update",children:[]},{value:"function zts_central_node_auth",id:"function-zts_central_node_auth",children:[]},{value:"function zts_central_net_get_members",id:"function-zts_central_net_get_members",children:[]},{value:"function zts_id_new",id:"function-zts_id_new",children:[]},{value:"function zts_id_pair_is_valid",id:"function-zts_id_pair_is_valid",children:[]},{value:"function zts_init_from_storage",id:"function-zts_init_from_storage",children:[]},{value:"function zts_init_from_memory",id:"function-zts_init_from_memory",children:[]},{value:"function zts_init_set_event_handler",id:"function-zts_init_set_event_handler",children:[]},{value:"function zts_init_blacklist_if",id:"function-zts_init_blacklist_if",children:[]},{value:"function zts_init_set_planet",id:"function-zts_init_set_planet",children:[]},{value:"function zts_init_set_port",id:"function-zts_init_set_port",children:[]},{value:"function zts_init_allow_net_cache",id:"function-zts_init_allow_net_cache",children:[]},{value:"function zts_init_allow_peer_cache",id:"function-zts_init_allow_peer_cache",children:[]},{value:"function zts_init_clear",id:"function-zts_init_clear",children:[]},{value:"function zts_addr_is_assigned",id:"function-zts_addr_is_assigned",children:[]},{value:"function zts_addr_get",id:"function-zts_addr_get",children:[]},{value:"function zts_addr_get_str",id:"function-zts_addr_get_str",children:[]},{value:"function zts_addr_get_all",id:"function-zts_addr_get_all",children:[]},{value:"function zts_addr_compute_6plane",id:"function-zts_addr_compute_6plane",children:[]},{value:"function zts_addr_compute_rfc4193",id:"function-zts_addr_compute_rfc4193",children:[]},{value:"function zts_addr_compute_rfc4193_str",id:"function-zts_addr_compute_rfc4193_str",children:[]},{value:"function zts_addr_compute_6plane_str",id:"function-zts_addr_compute_6plane_str",children:[]},{value:"function zts_net_compute_adhoc_id",id:"function-zts_net_compute_adhoc_id",children:[]},{value:"function zts_net_join",id:"function-zts_net_join",children:[]},{value:"function zts_net_leave",id:"function-zts_net_leave",children:[]},{value:"function zts_net_count",id:"function-zts_net_count",children:[]},{value:"function zts_net_get_mac",id:"function-zts_net_get_mac",children:[]},{value:"function zts_net_get_mac_str",id:"function-zts_net_get_mac_str",children:[]},{value:"function zts_net_get_broadcast",id:"function-zts_net_get_broadcast",children:[]},{value:"function zts_net_get_mtu",id:"function-zts_net_get_mtu",children:[]},{value:"function zts_net_get_name",id:"function-zts_net_get_name",children:[]},{value:"function zts_net_get_status",id:"function-zts_net_get_status",children:[]},{value:"function zts_net_get_type",id:"function-zts_net_get_type",children:[]},{value:"function zts_route_is_assigned",id:"function-zts_route_is_assigned",children:[]},{value:"function zts_node_start",id:"function-zts_node_start",children:[]},{value:"function zts_node_is_online",id:"function-zts_node_is_online",children:[]},{value:"function zts_node_get_id",id:"function-zts_node_get_id",children:[]},{value:"function zts_node_get_id_pair",id:"function-zts_node_get_id_pair",children:[]},{value:"function zts_node_get_port",id:"function-zts_node_get_port",children:[]},{value:"function zts_node_stop",id:"function-zts_node_stop",children:[]},{value:"function zts_node_restart",id:"function-zts_node_restart",children:[]},{value:"function zts_node_free",id:"function-zts_node_free",children:[]},{value:"function zts_moon_orbit",id:"function-zts_moon_orbit",children:[]},{value:"function zts_moon_deorbit",id:"function-zts_moon_deorbit",children:[]},{value:"function zts_stats_get_all",id:"function-zts_stats_get_all",children:[]},{value:"function zts_socket",id:"function-zts_socket",children:[]},{value:"function zts_connect",id:"function-zts_connect",children:[]},{value:"function zts_simple_connect",id:"function-zts_simple_connect",children:[]},{value:"function zts_bind",id:"function-zts_bind",children:[]},{value:"function zts_simple_bind",id:"function-zts_simple_bind",children:[]},{value:"function zts_listen",id:"function-zts_listen",children:[]},{value:"function zts_accept",id:"function-zts_accept",children:[]},{value:"function zts_simple_accept",id:"function-zts_simple_accept",children:[]},{value:"function zts_simple_tcp_client",id:"function-zts_simple_tcp_client",children:[]},{value:"function zts_simple_tcp_server",id:"function-zts_simple_tcp_server",children:[]},{value:"function zts_simple_udp_server",id:"function-zts_simple_udp_server",children:[]},{value:"function zts_simple_udp_client",id:"function-zts_simple_udp_client",children:[]},{value:"function zts_setsockopt",id:"function-zts_setsockopt",children:[]},{value:"function zts_getsockopt",id:"function-zts_getsockopt",children:[]},{value:"function zts_getsockname",id:"function-zts_getsockname",children:[]},{value:"function zts_getpeername",id:"function-zts_getpeername",children:[]},{value:"function zts_close",id:"function-zts_close",children:[]},{value:"function zts_select",id:"function-zts_select",children:[]},{value:"function zts_fcntl",id:"function-zts_fcntl",children:[]},{value:"function zts_poll",id:"function-zts_poll",children:[]},{value:"function zts_ioctl",id:"function-zts_ioctl",children:[]},{value:"function zts_send",id:"function-zts_send",children:[]},{value:"function zts_sendto",id:"function-zts_sendto",children:[]},{value:"function zts_sendmsg",id:"function-zts_sendmsg",children:[]},{value:"function zts_recv",id:"function-zts_recv",children:[]},{value:"function zts_recvfrom",id:"function-zts_recvfrom",children:[]},{value:"function zts_recvmsg",id:"function-zts_recvmsg",children:[]},{value:"function zts_read",id:"function-zts_read",children:[]},{value:"function zts_readv",id:"function-zts_readv",children:[]},{value:"function zts_write",id:"function-zts_write",children:[]},{value:"function zts_writev",id:"function-zts_writev",children:[]},{value:"function zts_shutdown",id:"function-zts_shutdown",children:[]},{value:"function zts_simple_set_no_delay",id:"function-zts_simple_set_no_delay",children:[]},{value:"function zts_simple_get_no_delay",id:"function-zts_simple_get_no_delay",children:[]},{value:"function zts_simple_set_linger",id:"function-zts_simple_set_linger",children:[]},{value:"function zts_simple_get_linger_enabled",id:"function-zts_simple_get_linger_enabled",children:[]},{value:"function zts_simple_get_linger_value",id:"function-zts_simple_get_linger_value",children:[]},{value:"function zts_simple_set_reuse_addr",id:"function-zts_simple_set_reuse_addr",children:[]},{value:"function zts_simple_get_reuse_addr",id:"function-zts_simple_get_reuse_addr",children:[]},{value:"function zts_simple_set_recv_timeout",id:"function-zts_simple_set_recv_timeout",children:[]},{value:"function zts_simple_get_recv_timeout",id:"function-zts_simple_get_recv_timeout",children:[]},{value:"function zts_simple_set_send_timeout",id:"function-zts_simple_set_send_timeout",children:[]},{value:"function zts_simple_get_send_timeout",id:"function-zts_simple_get_send_timeout",children:[]},{value:"function zts_simple_set_send_buf_size",id:"function-zts_simple_set_send_buf_size",children:[]},{value:"function zts_simple_get_send_buf_size",id:"function-zts_simple_get_send_buf_size",children:[]},{value:"function zts_simple_set_recv_buf_size",id:"function-zts_simple_set_recv_buf_size",children:[]},{value:"function zts_simple_get_recv_buf_size",id:"function-zts_simple_get_recv_buf_size",children:[]},{value:"function zts_simple_set_ttl",id:"function-zts_simple_set_ttl",children:[]},{value:"function zts_simple_get_ttl",id:"function-zts_simple_get_ttl",children:[]},{value:"function zts_simple_set_blocking",id:"function-zts_simple_set_blocking",children:[]},{value:"function zts_simple_get_blocking",id:"function-zts_simple_get_blocking",children:[]},{value:"function zts_simple_set_keepalive",id:"function-zts_simple_set_keepalive",children:[]},{value:"function zts_simple_get_keepalive",id:"function-zts_simple_get_keepalive",children:[]},{value:"function zts_gethostbyname",id:"function-zts_gethostbyname",children:[]},{value:"function zts_dns_set_server",id:"function-zts_dns_set_server",children:[]},{value:"function zts_dns_get_server",id:"function-zts_dns_get_server",children:[]},{value:"function zts_ipaddr_ntoa",id:"function-zts_ipaddr_ntoa",children:[]},{value:"function zts_ipaddr_aton",id:"function-zts_ipaddr_aton",children:[]},{value:"function zts_inet_ntop",id:"function-zts_inet_ntop",children:[]},{value:"function zts_inet_pton",id:"function-zts_inet_pton",children:[]},{value:"function zts_util_delay",id:"function-zts_util_delay",children:[]},{value:"function zts_util_get_ip_family",id:"function-zts_util_get_ip_family",children:[]},{value:"function zts_util_ipstr_to_saddr",id:"function-zts_util_ipstr_to_saddr",children:[]}]},{value:"Attributes Documentation",id:"attributes-documentation",children:[{value:"variable zts_errno",id:"variable-zts_errno",children:[]}]},{value:"Macro Documentation",id:"macro-documentation",children:[{value:"define ZTS_MAC_ADDRSTRLEN",id:"define-zts_mac_addrstrlen",children:[]},{value:"define ZTS_INET_ADDRSTRLEN",id:"define-zts_inet_addrstrlen",children:[]},{value:"define ZTS_INET6_ADDRSTRLEN",id:"define-zts_inet6_addrstrlen",children:[]},{value:"define ZTS_IP_MAX_STR_LEN",id:"define-zts_ip_max_str_len",children:[]},{value:"define ZTS_STORE_DATA_LEN",id:"define-zts_store_data_len",children:[]},{value:"define ZTS_MAX_NETWORK_SHORT_NAME_LENGTH",id:"define-zts_max_network_short_name_length",children:[]},{value:"define ZTS_MAX_NETWORK_ROUTES",id:"define-zts_max_network_routes",children:[]},{value:"define ZTS_MAX_ASSIGNED_ADDRESSES",id:"define-zts_max_assigned_addresses",children:[]},{value:"define ZTS_MAX_PEER_NETWORK_PATHS",id:"define-zts_max_peer_network_paths",children:[]},{value:"define ZTS_MAX_MULTICAST_SUBSCRIPTIONS",id:"define-zts_max_multicast_subscriptions",children:[]},{value:"define ZTS_C_API_ONLY",id:"define-zts_c_api_only",children:[]},{value:"define ZTS_IPADDR_NONE",id:"define-zts_ipaddr_none",children:[]},{value:"define ZTS_IPADDR_LOOPBACK",id:"define-zts_ipaddr_loopback",children:[]},{value:"define ZTS_IPADDR_ANY",id:"define-zts_ipaddr_any",children:[]},{value:"define ZTS_IPADDR_BROADCAST",id:"define-zts_ipaddr_broadcast",children:[]},{value:"define ZTS_INADDR_NONE",id:"define-zts_inaddr_none",children:[]},{value:"define ZTS_INADDR_LOOPBACK",id:"define-zts_inaddr_loopback",children:[]},{value:"define ZTS_INADDR_ANY",id:"define-zts_inaddr_any",children:[]},{value:"define ZTS_INADDR_BROADCAST",id:"define-zts_inaddr_broadcast",children:[]},{value:"define ZTS_SOCK_STREAM",id:"define-zts_sock_stream",children:[]},{value:"define ZTS_SOCK_DGRAM",id:"define-zts_sock_dgram",children:[]},{value:"define ZTS_SOCK_RAW",id:"define-zts_sock_raw",children:[]},{value:"define ZTS_AF_UNSPEC",id:"define-zts_af_unspec",children:[]},{value:"define ZTS_AF_INET",id:"define-zts_af_inet",children:[]},{value:"define ZTS_AF_INET6",id:"define-zts_af_inet6",children:[]},{value:"define ZTS_PF_INET",id:"define-zts_pf_inet",children:[]},{value:"define ZTS_PF_INET6",id:"define-zts_pf_inet6",children:[]},{value:"define ZTS_PF_UNSPEC",id:"define-zts_pf_unspec",children:[]},{value:"define ZTS_IPPROTO_IP",id:"define-zts_ipproto_ip",children:[]},{value:"define ZTS_IPPROTO_ICMP",id:"define-zts_ipproto_icmp",children:[]},{value:"define ZTS_IPPROTO_TCP",id:"define-zts_ipproto_tcp",children:[]},{value:"define ZTS_IPPROTO_UDP",id:"define-zts_ipproto_udp",children:[]},{value:"define ZTS_IPPROTO_IPV6",id:"define-zts_ipproto_ipv6",children:[]},{value:"define ZTS_IPPROTO_ICMPV6",id:"define-zts_ipproto_icmpv6",children:[]},{value:"define ZTS_IPPROTO_UDPLITE",id:"define-zts_ipproto_udplite",children:[]},{value:"define ZTS_IPPROTO_RAW",id:"define-zts_ipproto_raw",children:[]},{value:"define ZTS_MSG_PEEK",id:"define-zts_msg_peek",children:[]},{value:"define ZTS_MSG_WAITALL",id:"define-zts_msg_waitall",children:[]},{value:"define ZTS_MSG_OOB",id:"define-zts_msg_oob",children:[]},{value:"define ZTS_MSG_DONTWAIT",id:"define-zts_msg_dontwait",children:[]},{value:"define ZTS_MSG_MORE",id:"define-zts_msg_more",children:[]},{value:"define ZTS_IOCPARM_MASK",id:"define-zts_iocparm_mask",children:[]},{value:"define ZTS_IOC_VOID",id:"define-zts_ioc_void",children:[]},{value:"define ZTS_IOC_OUT",id:"define-zts_ioc_out",children:[]},{value:"define ZTS_IOC_IN",id:"define-zts_ioc_in",children:[]},{value:"define ZTS_IOC_INOUT",id:"define-zts_ioc_inout",children:[]},{value:"define ZTS_IO",id:"define-zts_io",children:[]},{value:"define ZTS_IOR",id:"define-zts_ior",children:[]},{value:"define ZTS_IOW",id:"define-zts_iow",children:[]},{value:"define ZTS_FIONREAD",id:"define-zts_fionread",children:[]},{value:"define ZTS_FIONBIO",id:"define-zts_fionbio",children:[]},{value:"define SIN_ZERO_LEN",id:"define-sin_zero_len",children:[]},{value:"define ZTS_API",id:"define-zts_api",children:[]},{value:"define ZTCALL",id:"define-ztcall",children:[]},{value:"define ZTS_CENTRAL_DEFAULT_URL",id:"define-zts_central_default_url",children:[]},{value:"define ZTS_CENRTAL_MAX_URL_LEN",id:"define-zts_cenrtal_max_url_len",children:[]},{value:"define ZTS_CENTRAL_TOKEN_LEN",id:"define-zts_central_token_len",children:[]},{value:"define ZTS_CENTRAL_RESP_BUF_DEFAULT_SZ",id:"define-zts_central_resp_buf_default_sz",children:[]},{value:"define ZTS_HTTP_GET",id:"define-zts_http_get",children:[]},{value:"define ZTS_HTTP_POST",id:"define-zts_http_post",children:[]},{value:"define ZTS_HTTP_DELETE",id:"define-zts_http_delete",children:[]},{value:"define ZTS_CENTRAL_NODE_AUTH_FALSE",id:"define-zts_central_node_auth_false",children:[]},{value:"define ZTS_CENTRAL_NODE_AUTH_TRUE",id:"define-zts_central_node_auth_true",children:[]},{value:"define ZTS_CENTRAL_READ",id:"define-zts_central_read",children:[]},{value:"define ZTS_CENTRAL_WRITE",id:"define-zts_central_write",children:[]},{value:"define ZTS_ID_STR_BUF_LEN",id:"define-zts_id_str_buf_len",children:[]},{value:"define ZTS_SOL_SOCKET",id:"define-zts_sol_socket",children:[]},{value:"define ZTS_SO_DEBUG",id:"define-zts_so_debug",children:[]},{value:"define ZTS_SO_ACCEPTCONN",id:"define-zts_so_acceptconn",children:[]},{value:"define ZTS_SO_REUSEADDR",id:"define-zts_so_reuseaddr",children:[]},{value:"define ZTS_SO_KEEPALIVE",id:"define-zts_so_keepalive",children:[]},{value:"define ZTS_SO_DONTROUTE",id:"define-zts_so_dontroute",children:[]},{value:"define ZTS_SO_BROADCAST",id:"define-zts_so_broadcast",children:[]},{value:"define ZTS_SO_USELOOPBACK",id:"define-zts_so_useloopback",children:[]},{value:"define ZTS_SO_LINGER",id:"define-zts_so_linger",children:[]},{value:"define ZTS_SO_DONTLINGER",id:"define-zts_so_dontlinger",children:[]},{value:"define ZTS_SO_OOBINLINE",id:"define-zts_so_oobinline",children:[]},{value:"define ZTS_SO_REUSEPORT",id:"define-zts_so_reuseport",children:[]},{value:"define ZTS_SO_SNDBUF",id:"define-zts_so_sndbuf",children:[]},{value:"define ZTS_SO_RCVBUF",id:"define-zts_so_rcvbuf",children:[]},{value:"define ZTS_SO_SNDLOWAT",id:"define-zts_so_sndlowat",children:[]},{value:"define ZTS_SO_RCVLOWAT",id:"define-zts_so_rcvlowat",children:[]},{value:"define ZTS_SO_SNDTIMEO",id:"define-zts_so_sndtimeo",children:[]},{value:"define ZTS_SO_RCVTIMEO",id:"define-zts_so_rcvtimeo",children:[]},{value:"define ZTS_SO_ERROR",id:"define-zts_so_error",children:[]},{value:"define ZTS_SO_TYPE",id:"define-zts_so_type",children:[]},{value:"define ZTS_SO_CONTIMEO",id:"define-zts_so_contimeo",children:[]},{value:"define ZTS_SO_NO_CHECK",id:"define-zts_so_no_check",children:[]},{value:"define ZTS_SO_BINDTODEVICE",id:"define-zts_so_bindtodevice",children:[]},{value:"define ZTS_IP_TOS",id:"define-zts_ip_tos",children:[]},{value:"define ZTS_IP_TTL",id:"define-zts_ip_ttl",children:[]},{value:"define ZTS_IP_PKTINFO",id:"define-zts_ip_pktinfo",children:[]},{value:"define ZTS_TCP_NODELAY",id:"define-zts_tcp_nodelay",children:[]},{value:"define ZTS_TCP_KEEPALIVE",id:"define-zts_tcp_keepalive",children:[]},{value:"define ZTS_TCP_KEEPIDLE",id:"define-zts_tcp_keepidle",children:[]},{value:"define ZTS_TCP_KEEPINTVL",id:"define-zts_tcp_keepintvl",children:[]},{value:"define ZTS_TCP_KEEPCNT",id:"define-zts_tcp_keepcnt",children:[]},{value:"define ZTS_IPV6_CHECKSUM",id:"define-zts_ipv6_checksum",children:[]},{value:"define ZTS_IPV6_V6ONLY",id:"define-zts_ipv6_v6only",children:[]},{value:"define ZTS_UDPLITE_SEND_CSCOV",id:"define-zts_udplite_send_cscov",children:[]},{value:"define ZTS_UDPLITE_RECV_CSCOV",id:"define-zts_udplite_recv_cscov",children:[]},{value:"define ZTS_IP_MULTICAST_TTL",id:"define-zts_ip_multicast_ttl",children:[]},{value:"define ZTS_IP_MULTICAST_IF",id:"define-zts_ip_multicast_if",children:[]},{value:"define ZTS_IP_MULTICAST_LOOP",id:"define-zts_ip_multicast_loop",children:[]},{value:"define ZTS_IP_ADD_MEMBERSHIP",id:"define-zts_ip_add_membership",children:[]},{value:"define ZTS_IP_DROP_MEMBERSHIP",id:"define-zts_ip_drop_membership",children:[]},{value:"define ZTS_IPV6_JOIN_GROUP",id:"define-zts_ipv6_join_group",children:[]},{value:"define ZTS_IPV6_ADD_MEMBERSHIP",id:"define-zts_ipv6_add_membership",children:[]},{value:"define ZTS_IPV6_LEAVE_GROUP",id:"define-zts_ipv6_leave_group",children:[]},{value:"define ZTS_IPV6_DROP_MEMBERSHIP",id:"define-zts_ipv6_drop_membership",children:[]},{value:"define ZTS_IPTOS_TOS_MASK",id:"define-zts_iptos_tos_mask",children:[]},{value:"define ZTS_IPTOS_TOS",id:"define-zts_iptos_tos",children:[]},{value:"define ZTS_IPTOS_LOWDELAY",id:"define-zts_iptos_lowdelay",children:[]},{value:"define ZTS_IPTOS_THROUGHPUT",id:"define-zts_iptos_throughput",children:[]},{value:"define ZTS_IPTOS_RELIABILITY",id:"define-zts_iptos_reliability",children:[]},{value:"define ZTS_IPTOS_LOWCOST",id:"define-zts_iptos_lowcost",children:[]},{value:"define ZTS_IPTOS_MINCOST",id:"define-zts_iptos_mincost",children:[]},{value:"define ZTS_IPTOS_PREC_MASK",id:"define-zts_iptos_prec_mask",children:[]},{value:"define ZTS_IPTOS_PREC",id:"define-zts_iptos_prec",children:[]},{value:"define ZTS_IPTOS_PREC_NETCONTROL",id:"define-zts_iptos_prec_netcontrol",children:[]},{value:"define ZTS_IPTOS_PREC_INTERNETCONTROL",id:"define-zts_iptos_prec_internetcontrol",children:[]},{value:"define ZTS_IPTOS_PREC_CRITIC_ECP",id:"define-zts_iptos_prec_critic_ecp",children:[]},{value:"define ZTS_IPTOS_PREC_FLASHOVERRIDE",id:"define-zts_iptos_prec_flashoverride",children:[]},{value:"define ZTS_IPTOS_PREC_FLASH",id:"define-zts_iptos_prec_flash",children:[]},{value:"define ZTS_IPTOS_PREC_IMMEDIATE",id:"define-zts_iptos_prec_immediate",children:[]},{value:"define ZTS_IPTOS_PREC_PRIORITY",id:"define-zts_iptos_prec_priority",children:[]},{value:"define ZTS_IPTOS_PREC_ROUTINE",id:"define-zts_iptos_prec_routine",children:[]},{value:"define LWIP_SOCKET_OFFSET",id:"define-lwip_socket_offset",children:[]},{value:"define MEMP_NUM_NETCONN",id:"define-memp_num_netconn",children:[]},{value:"define ZTS_FD_SETSIZE",id:"define-zts_fd_setsize",children:[]},{value:"define ZTS_FDSETSAFESET",id:"define-zts_fdsetsafeset",children:[]},{value:"define ZTS_FDSETSAFEGET",id:"define-zts_fdsetsafeget",children:[]},{value:"define ZTS_FD_SET",id:"define-zts_fd_set",children:[]},{value:"define ZTS_FD_CLR",id:"define-zts_fd_clr",children:[]},{value:"define ZTS_FD_ISSET",id:"define-zts_fd_isset",children:[]},{value:"define ZTS_FD_ZERO",id:"define-zts_fd_zero",children:[]},{value:"define ZTS_F_GETFL",id:"define-zts_f_getfl",children:[]},{value:"define ZTS_F_SETFL",id:"define-zts_f_setfl",children:[]},{value:"define ZTS_O_NONBLOCK",id:"define-zts_o_nonblock",children:[]},{value:"define ZTS_O_NDELAY",id:"define-zts_o_ndelay",children:[]},{value:"define ZTS_O_RDONLY",id:"define-zts_o_rdonly",children:[]},{value:"define ZTS_O_WRONLY",id:"define-zts_o_wronly",children:[]},{value:"define ZTS_O_RDWR",id:"define-zts_o_rdwr",children:[]},{value:"define ZTS_POLLIN",id:"define-zts_pollin",children:[]},{value:"define ZTS_POLLOUT",id:"define-zts_pollout",children:[]},{value:"define ZTS_POLLERR",id:"define-zts_pollerr",children:[]},{value:"define ZTS_POLLNVAL",id:"define-zts_pollnval",children:[]},{value:"define ZTS_POLLRDNORM",id:"define-zts_pollrdnorm",children:[]},{value:"define ZTS_POLLRDBAND",id:"define-zts_pollrdband",children:[]},{value:"define ZTS_POLLPRI",id:"define-zts_pollpri",children:[]},{value:"define ZTS_POLLWRNORM",id:"define-zts_pollwrnorm",children:[]},{value:"define ZTS_POLLWRBAND",id:"define-zts_pollwrband",children:[]},{value:"define ZTS_POLLHUP",id:"define-zts_pollhup",children:[]},{value:"define ZTS_MSG_TRUNC",id:"define-zts_msg_trunc",children:[]},{value:"define ZTS_MSG_CTRUNC",id:"define-zts_msg_ctrunc",children:[]},{value:"define ZTS_SHUT_RD",id:"define-zts_shut_rd",children:[]},{value:"define ZTS_SHUT_WR",id:"define-zts_shut_wr",children:[]},{value:"define ZTS_SHUT_RDWR",id:"define-zts_shut_rdwr",children:[]},{value:"define h_addr",id:"define-h_addr",children:[]}]},{value:"Source code",id:"source-code",children:[]}],c={toc:_};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"#detailed-description"},"More...")),Object(i.b)("h2",{id:"classes"},"Classes"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null}),Object(i.b)("th",{parentName:"tr",align:null},"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__in__addr"},"zts_in_addr")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__in6__addr"},"zts_in6_addr")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"union"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/unionzts__in6__addr_1_1un"},"zts_in6_addr::un")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__sockaddr__in"},"zts_sockaddr_in")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__sockaddr__in6"},"zts_sockaddr_in6")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__sockaddr"},"zts_sockaddr")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__sockaddr__storage"},"zts_sockaddr_storage")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__node__info__t"},"zts_node_info_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__addr__info__t"},"zts_addr_info_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__route__info__t"},"zts_route_info_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__multicast__group__t"},"zts_multicast_group_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__net__info__t"},"zts_net_info_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__path__t"},"zts_path_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__peer__info__t"},"zts_peer_info_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__netif__info__t"},"zts_netif_info_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__event__msg__t"},"zts_event_msg_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__stats__counter__t"},"zts_stats_counter_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__linger"},"zts_linger")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__ip__mreq"},"zts_ip_mreq")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__in__pktinfo"},"zts_in_pktinfo")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__ipv6__mreq"},"zts_ipv6_mreq")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__fd__set"},"zts_fd_set")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__timeval"},"zts_timeval")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__pollfd"},"zts_pollfd")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__iovec"},"zts_iovec")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__msghdr"},"zts_msghdr")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__hostent"},"zts_hostent")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__ip4__addr"},"zts_ip4_addr")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__ip6__addr"},"zts_ip6_addr")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/classes/structzts__ip__addr"},"zts_ip_addr")))))),Object(i.b)("h2",{id:"types"},"Types"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null}),Object(i.b)("th",{parentName:"tr",align:null},"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"enum"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#enum-zts_error_t"},"zts_error_t"))," { ZTS_ERR_OK = 0, ZTS_ERR_SOCKET = -1, ZTS_ERR_SERVICE = -2, ZTS_ERR_ARG = -3, ZTS_ERR_NO_RESULT = -4, ZTS_ERR_GENERAL = -5}")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"enum"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#enum-zts_event_t"},"zts_event_t"))," { ZTS_EVENT_NODE_UP = 200, ZTS_EVENT_NODE_ONLINE = 201, ZTS_EVENT_NODE_OFFLINE = 202, ZTS_EVENT_NODE_DOWN = 203, ZTS_EVENT_NODE_FATAL_ERROR = 204, ZTS_EVENT_NETWORK_NOT_FOUND = 210, ZTS_EVENT_NETWORK_CLIENT_TOO_OLD = 211, ZTS_EVENT_NETWORK_REQ_CONFIG = 212, ZTS_EVENT_NETWORK_OK = 213, ZTS_EVENT_NETWORK_ACCESS_DENIED = 214, ZTS_EVENT_NETWORK_READY_IP4 = 215, ZTS_EVENT_NETWORK_READY_IP6 = 216, ZTS_EVENT_NETWORK_READY_IP4_IP6 = 217, ZTS_EVENT_NETWORK_DOWN = 218, ZTS_EVENT_NETWORK_UPDATE = 219, ZTS_EVENT_STACK_UP = 220, ZTS_EVENT_STACK_DOWN = 221, ZTS_EVENT_NETIF_UP = 230, ZTS_EVENT_NETIF_DOWN = 231, ZTS_EVENT_NETIF_REMOVED = 232, ZTS_EVENT_NETIF_LINK_UP = 233, ZTS_EVENT_NETIF_LINK_DOWN = 234, ZTS_EVENT_PEER_DIRECT = 240, ZTS_EVENT_PEER_RELAY = 241, ZTS_EVENT_PEER_UNREACHABLE = 242, ZTS_EVENT_PEER_PATH_DISCOVERED = 243, ZTS_EVENT_PEER_PATH_DEAD = 244, ZTS_EVENT_ROUTE_ADDED = 250, ZTS_EVENT_ROUTE_REMOVED = 251, ZTS_EVENT_ADDR_ADDED_IP4 = 260, ZTS_EVENT_ADDR_REMOVED_IP4 = 261, ZTS_EVENT_ADDR_ADDED_IP6 = 262, ZTS_EVENT_ADDR_REMOVED_IP6 = 263, ZTS_EVENT_STORE_IDENTITY_SECRET = 270, ZTS_EVENT_STORE_IDENTITY_PUBLIC = 271, ZTS_EVENT_STORE_PLANET = 272, ZTS_EVENT_STORE_PEER = 273, ZTS_EVENT_STORE_NETWORK = 274}")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"enum"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#enum-zts_errno_t"},"zts_errno_t"))," { ZTS_EPERM = 1, ZTS_ENOENT = 2, ZTS_ESRCH = 3, ZTS_EINTR = 4, ZTS_EIO = 5, ZTS_ENXIO = 6, ZTS_EBADF = 9, ZTS_EAGAIN = 11, ZTS_EWOULDBLOCK = ZTS_EAGAIN, ZTS_ENOMEM = 12, ZTS_EACCES = 13, ZTS_EFAULT = 14, ZTS_EBUSY = 16, ZTS_EEXIST = 17, ZTS_ENODEV = 19, ZTS_EINVAL = 22, ZTS_ENFILE = 23, ZTS_EMFILE = 24, ZTS_ENOSYS = 38, ZTS_ENOTSOCK = 88, ZTS_EDESTADDRREQ = 89, ZTS_EMSGSIZE = 90, ZTS_EPROTOTYPE = 91, ZTS_ENOPROTOOPT = 92, ZTS_EPROTONOSUPPORT = 93, ZTS_ESOCKTNOSUPPORT = 94, ZTS_EOPNOTSUPP = 95, ZTS_EPFNOSUPPORT = 96, ZTS_EAFNOSUPPORT = 97, ZTS_EADDRINUSE = 98, ZTS_EADDRNOTAVAIL = 99, ZTS_ENETDOWN = 100, ZTS_ENETUNREACH = 101, ZTS_ECONNABORTED = 103, ZTS_ECONNRESET = 104, ZTS_ENOBUFS = 105, ZTS_EISCONN = 106, ZTS_ENOTCONN = 107, ZTS_ETIMEDOUT = 110, ZTS_EHOSTUNREACH = 113, ZTS_EALREADY = 114, ZTS_EINPROGRESS = 115}")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"enum"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#enum-zts_network_status_t"},"zts_network_status_t"))," { ZTS_NETWORK_STATUS_REQUESTING_CONFIGURATION = 0, ZTS_NETWORK_STATUS_OK = 1, ZTS_NETWORK_STATUS_ACCESS_DENIED = 2, ZTS_NETWORK_STATUS_NOT_FOUND = 3, ZTS_NETWORK_STATUS_PORT_ERROR = 4, ZTS_NETWORK_STATUS_CLIENT_TOO_OLD = 5}")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"enum"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#enum-zts_net_info_type_t"},"zts_net_info_type_t"))," { ZTS_NETWORK_TYPE_PRIVATE = 0, ZTS_NETWORK_TYPE_PUBLIC = 1}")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"enum"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#enum-zts_peer_role_t"},"zts_peer_role_t"))," { ZTS_PEER_ROLE_LEAF = 0, ZTS_PEER_ROLE_MOON = 1, ZTS_PEER_ROLE_PLANET = 2}")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"typedef uint32_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#typedef-zts_socklen_t"},"zts_socklen_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"typedef uint32_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#typedef-zts_in_addr_t"},"zts_in_addr_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"typedef uint16_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#typedef-zts_in_port_t"},"zts_in_port_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"typedef uint8_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#typedef-zts_sa_family_t"},"zts_sa_family_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"typedef struct zts_ip_mreq"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#typedef-zts_ip_mreq"},"zts_ip_mreq")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"typedef struct zts_ipv6_mreq"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#typedef-zts_ipv6_mreq"},"zts_ipv6_mreq")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"typedef struct zts_fd_set"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#typedef-zts_fd_set"},"zts_fd_set")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"typedef struct zts_timeval"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#typedef-zts_timeval"},"zts_timeval")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"typedef unsigned int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#typedef-zts_nfds_t"},"zts_nfds_t")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"typedef struct ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__ip__addr"},"zts_ip_addr")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#typedef-zts_ip_addr"},"zts_ip_addr")))))),Object(i.b)("h2",{id:"functions"},"Functions"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null}),Object(i.b)("th",{parentName:"tr",align:null},"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_set_access_mode"},"zts_central_set_access_mode")),"(int8_t modes)",Object(i.b)("br",null),"Enable read/write capability. Default before calling this is read-only: ",Object(i.b)("inlineCode",{parentName:"td"},"ZTS_CENTRAL_READ"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_set_verbose"},"zts_central_set_verbose")),"(int8_t is_verbose)",Object(i.b)("br",null),"Enable or disable libcurl verbosity.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"void"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_clear_resp_buf"},"zts_central_clear_resp_buf")),"()")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_init"},"zts_central_init")),"(const char ",Object(i.b)("em",{parentName:"td"}," url_str, const char ")," token_str, char * resp_buf, uint32_t buf_len)",Object(i.b)("br",null),"Set the Central API ",Object(i.b)("inlineCode",{parentName:"td"},"URL")," and user API token.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"void"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_cleanup"},"zts_central_cleanup")),"()")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_get_last_resp_buf"},"zts_central_get_last_resp_buf")),"(char * dst, int len)",Object(i.b)("br",null),"Copies the ",Object(i.b)("inlineCode",{parentName:"td"},"JSON"),"-formatted string buffer from the last request into a user-provided buffer.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_status_get"},"zts_central_status_get")),"(int * http_resp_code)",Object(i.b)("br",null),"Get the status of the Central API server.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_self_get"},"zts_central_self_get")),"(int * http_resp_code)",Object(i.b)("br",null),"Get the currently authenticated user\u2019s record.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_net_get"},"zts_central_net_get")),"(int * http_resp_code, uint64_t net_id)",Object(i.b)("br",null),"Retrieve a ",Object(i.b)("inlineCode",{parentName:"td"},"Network"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_net_update"},"zts_central_net_update")),"(int * http_resp_code, uint64_t net_id)",Object(i.b)("br",null),"Update or create a ",Object(i.b)("inlineCode",{parentName:"td"},"Network"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_net_delete"},"zts_central_net_delete")),"(int * http_resp_code, uint64_t net_id)",Object(i.b)("br",null),"Delete a Network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_net_get_all"},"zts_central_net_get_all")),"(int * http_resp_code)",Object(i.b)("br",null),"Get All Viewable Networks.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_member_get"},"zts_central_member_get")),"(int * http_resp_code, uint64_t net_id, uint64_t node_id)",Object(i.b)("br",null),"Retrieve a Member.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_member_update"},"zts_central_member_update")),"(int ",Object(i.b)("em",{parentName:"td"}," http_resp_code, uint64_t net_id, uint64_t node_id, char ")," post_data)",Object(i.b)("br",null),"Update or add a Member.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_node_auth"},"zts_central_node_auth")),"(int * http_resp_code, uint64_t net_id, uint64_t node_id, uint8_t is_authed)",Object(i.b)("br",null),"Authorize or (De)authorize a node on a network. This operation is idempotent.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_central_net_get_members"},"zts_central_net_get_members")),"(int * http_resp_code, uint64_t net_id)",Object(i.b)("br",null),"Get All Members of a Network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_id_new"},"zts_id_new")),"(char ",Object(i.b)("em",{parentName:"td"}," key, uint16_t ")," key_buf_len)",Object(i.b)("br",null),"Generates a node identity (public/secret key-pair) and stores it in a user-provided buffer.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_id_pair_is_valid"},"zts_id_pair_is_valid")),"(const char * key, int len)",Object(i.b)("br",null),"Verifies that a key-pair is valid. Checks formatting and pairing of key to address.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_storage"},"zts_init_from_storage")),"(const char * path)",Object(i.b)("br",null),"Instruct ZeroTier to look for node identity files at the given location. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_node_start()]()"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_memory"},"zts_init_from_memory")),"(const char * key, uint16_t len)",Object(i.b)("br",null),"Instruct ZeroTier to use the identity provided in ",Object(i.b)("inlineCode",{parentName:"td"},"key"),". This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_node_start()]()"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_set_event_handler"},"zts_init_set_event_handler")),"(void(",Object(i.b)("em",{parentName:"td"},")(void "),") callback)",Object(i.b)("br",null),"Set the event handler function. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_node_start()]()"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_blacklist_if"},"zts_init_blacklist_if")),"(const char * prefix, int len)",Object(i.b)("br",null),"Blacklist an interface prefix (or name). This prevents ZeroTier from sending traffic over matching interfaces. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_node_start()]()"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_set_planet"},"zts_init_set_planet")),"(const char * planet_data, int len)",Object(i.b)("br",null),"Present a planet definition for ZeroTier to use instead of the default. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_node_start()]()"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_set_port"},"zts_init_set_port")),"(unsigned short port)",Object(i.b)("br",null),"Set the port to which the node should bind. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_node_start()]()"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_allow_net_cache"},"zts_init_allow_net_cache")),"(int allowed)",Object(i.b)("br",null),"Enable or disable whether the node will cache network details (enabled by default when ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_init_from_storage()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_storage)")," is used.) Must be called before ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_node_start()]()"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_allow_peer_cache"},"zts_init_allow_peer_cache")),"(int allowed)",Object(i.b)("br",null),"Enable or disable whether the node will cache peer details (enabled by default when ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_init_from_storage()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_storage)")," is used.) Must be called before ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_node_start()]()"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_clear"},"zts_init_clear")),"()",Object(i.b)("br",null),"Clear all initialization settings. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_node_start()]()")," or after ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_node_stop()]()"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_addr_is_assigned"},"zts_addr_is_assigned")),"(uint64_t net_id, int family)",Object(i.b)("br",null),"Return whether an address of the given family has been assigned by the network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_addr_get"},"zts_addr_get")),"(uint64_t net_id, int family, struct ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__sockaddr__storage"},"zts_sockaddr_storage")," * addr)",Object(i.b)("br",null),"Get the first-assigned IP on the given network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_addr_get_str"},"zts_addr_get_str")),"(uint64_t net_id, int family, char * dst, int len)",Object(i.b)("br",null),"Get the first-assigned IP on the given network as a null-terminated human-readable string.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_addr_get_all"},"zts_addr_get_all")),"(uint64_t net_id, struct ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__sockaddr__storage"},"zts_sockaddr_storage")," ",Object(i.b)("em",{parentName:"td"}," addr, int ")," count)",Object(i.b)("br",null),"Get all IP addresses assigned to this node by the given network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_addr_compute_6plane"},"zts_addr_compute_6plane")),"(const uint64_t net_id, const uint64_t node_id, struct ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__sockaddr__storage"},"zts_sockaddr_storage")," * addr)",Object(i.b)("br",null),"Compute a ",Object(i.b)("inlineCode",{parentName:"td"},"6PLANE")," IPv6 address for the given Network ID and Node ID.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_addr_compute_rfc4193"},"zts_addr_compute_rfc4193")),"(const uint64_t net_id, const uint64_t node_id, struct ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__sockaddr__storage"},"zts_sockaddr_storage")," * addr)",Object(i.b)("br",null),"Compute ",Object(i.b)("inlineCode",{parentName:"td"},"RFC4193")," IPv6 address for the given Network ID and Node ID.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_addr_compute_rfc4193_str"},"zts_addr_compute_rfc4193_str")),"(uint64_t net_id, uint64_t node_id, char * dst, int len)",Object(i.b)("br",null),"Compute ",Object(i.b)("inlineCode",{parentName:"td"},"RFC4193")," IPv6 address for the given Network ID and Node ID and copy its null-terminated human-readable string representation into destination buffer.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_addr_compute_6plane_str"},"zts_addr_compute_6plane_str")),"(uint64_t net_id, uint64_t node_id, char * dst, int len)",Object(i.b)("br",null),"Compute ",Object(i.b)("inlineCode",{parentName:"td"},"6PLANE")," IPv6 address for the given Network ID and Node ID and copy its null-terminated human-readable string representation into destination buffer.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"uint64_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_compute_adhoc_id"},"zts_net_compute_adhoc_id")),"(uint16_t start_port, uint16_t end_port)",Object(i.b)("br",null),"Compute ",Object(i.b)("inlineCode",{parentName:"td"},"RFC4193")," IPv6 address for the given Network ID and Node ID.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_join"},"zts_net_join")),"(uint64_t net_id)",Object(i.b)("br",null),"Join a network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_leave"},"zts_net_leave")),"(uint64_t net_id)",Object(i.b)("br",null),"Leave a network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_count"},"zts_net_count")),"()",Object(i.b)("br",null),"Return number of joined networks.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"uint64_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_get_mac"},"zts_net_get_mac")),"(uint64_t net_id)",Object(i.b)("br",null),"Get the MAC Address for this node on the given network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_get_mac_str"},"zts_net_get_mac_str")),"(uint64_t net_id, char * dst, int len)",Object(i.b)("br",null),"Get the MAC Address for this node on the given network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_get_broadcast"},"zts_net_get_broadcast")),"(uint64_t net_id)",Object(i.b)("br",null),"Return whether broadcast is enabled on this network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_get_mtu"},"zts_net_get_mtu")),"(uint64_t net_id)",Object(i.b)("br",null),"Get the MTU of the given network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_get_name"},"zts_net_get_name")),"(uint64_t net_id, char * dst, int len)",Object(i.b)("br",null),"Get the nickname of the network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_get_status"},"zts_net_get_status")),"(uint64_t net_id)",Object(i.b)("br",null),"Get the status of the network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_net_get_type"},"zts_net_get_type")),"(uint64_t net_id)",Object(i.b)("br",null),"Get the type of network (public or private.)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_route_is_assigned"},"zts_route_is_assigned")),"(uint64_t net_id, int family)",Object(i.b)("br",null),"Return whether a managed route of the given address family has been assigned by the network.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_start"},"zts_node_start")),"()",Object(i.b)("br",null),"Start the ZeroTier node. Should be called after calling the relevant ",Object(i.b)("inlineCode",{parentName:"td"},"zts_init_*")," functions for your application. To enable storage call ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_init_from_storage()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_storage)")," before this function. To enable event callbacks call ",Object(i.b)("inlineCode",{parentName:"td"},"[zts_init_set_event_handler()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_set_event_handler)")," before this function.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_is_online"},"zts_node_is_online")),"()",Object(i.b)("br",null),"Return whether the node is online (Can reach the Internet)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"uint64_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_get_id"},"zts_node_get_id")),"()",Object(i.b)("br",null),"Get the public node identity (aka ",Object(i.b)("inlineCode",{parentName:"td"},"node_id"),"). Callable only after the node has been started.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_get_id_pair"},"zts_node_get_id_pair")),"(char ",Object(i.b)("em",{parentName:"td"}," key, uint16_t ")," key_buf_len)",Object(i.b)("br",null),"Copy the current node's public (and secret!) identity into a buffer.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_get_port"},"zts_node_get_port")),"()",Object(i.b)("br",null),"Get the primary port to which the node is bound. Callable only after the node has been started.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_stop"},"zts_node_stop")),"()",Object(i.b)("br",null),"Stop the ZeroTier node and bring down all virtual network transport services. Callable only after the node has been started.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_restart"},"zts_node_restart")),"()",Object(i.b)("br",null),"Restart the ZeroTier node. Callable only after the node has been started.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_free"},"zts_node_free")),"()",Object(i.b)("br",null),"Stop all background threads, bring down all transport services, free all resources. After calling this function an application restart will be required before the library can be used again. Callable only after the node has been started.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_moon_orbit"},"zts_moon_orbit")),"(uint64_t moon_world_id, uint64_t moon_seed)",Object(i.b)("br",null),"Orbit a given moon (user-defined root server)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_moon_deorbit"},"zts_moon_deorbit")),"(uint64_t moon_world_id)",Object(i.b)("br",null),"De-orbit a given moon (user-defined root server)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_stats_get_all"},"zts_stats_get_all")),"(",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__stats__counter__t"},"zts_stats_counter_t")," * dst)",Object(i.b)("br",null),"Get all statistical counters for all protocols and levels, where ",Object(i.b)("em",{parentName:"td"},"all")," means ",Object(i.b)("em",{parentName:"td"},"most"),". If you need anything more detailed you should inspect what is available in ",Object(i.b)("inlineCode",{parentName:"td"},"lwip/stats.h"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_socket"},"zts_socket")),"(int family, int type, int protocol)",Object(i.b)("br",null),"Create a socket.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_connect"},"zts_connect")),"(int fd, const struct ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__sockaddr"},"zts_sockaddr")," * addr, zts_socklen_t addrlen)",Object(i.b)("br",null),"Connect a socket to a remote host.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_connect"},"zts_simple_connect")),"(int fd, const char * ipstr, int port, int timeout_ms)",Object(i.b)("br",null),"Connect a socket to a remote host.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_bind"},"zts_bind")),"(int fd, const struct ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__sockaddr"},"zts_sockaddr")," * addr, zts_socklen_t addrlen)",Object(i.b)("br",null),"Bind a socket to a local address.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_bind"},"zts_simple_bind")),"(int fd, const char * ipstr, int port)",Object(i.b)("br",null),"Bind a socket to a local address.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_listen"},"zts_listen")),"(int fd, int backlog)",Object(i.b)("br",null),"Listen for incoming connections on socket.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_accept"},"zts_accept")),"(int fd, struct ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__sockaddr"},"zts_sockaddr")," ",Object(i.b)("em",{parentName:"td"}," addr, zts_socklen_t ")," addrlen)",Object(i.b)("br",null),"Accept an incoming connection.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_accept"},"zts_simple_accept")),"(int fd, char ",Object(i.b)("em",{parentName:"td"}," remote_addr, int len, int ")," port)",Object(i.b)("br",null),"Accept an incoming connection.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_tcp_client"},"zts_simple_tcp_client")),"(const char * remote_ipstr, int remote_port)",Object(i.b)("br",null),"A convenience function that takes a remote address IP string and creates the appropriate type of socket, and uses it to connect to a remote host.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_tcp_server"},"zts_simple_tcp_server")),"(const char ",Object(i.b)("em",{parentName:"td"}," local_ipstr, int local_port, char ")," remote_ipstr, int len, int * remote_port)",Object(i.b)("br",null),"A convenience function that takes a remote address IP string and creates the appropriate type of socket, binds, listens, and then accepts on it.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_udp_server"},"zts_simple_udp_server")),"(const char * local_ipstr, int local_port)",Object(i.b)("br",null),"A convenience function that takes a remote address IP string and creates the appropriate type of socket, and binds to it.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_udp_client"},"zts_simple_udp_client")),"(const char * remote_ipstr)",Object(i.b)("br",null),"This function doesn't really do anything other than be a namespace counterpart to ",Object(i.b)("inlineCode",{parentName:"td"},"zts_simple_udp_server"),". All this function does is create a ",Object(i.b)("inlineCode",{parentName:"td"},"ZTS_SOCK_DGRAM")," socket and return its file descriptor.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_setsockopt"},"zts_setsockopt")),"(int fd, int level, int optname, const void * optval, zts_socklen_t optlen)",Object(i.b)("br",null),"Set socket options.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_getsockopt"},"zts_getsockopt")),"(int fd, int level, int optname, void ",Object(i.b)("em",{parentName:"td"}," optval, zts_socklen_t ")," optlen)",Object(i.b)("br",null),"Get socket options.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_getsockname"},"zts_getsockname")),"(int fd, struct ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__sockaddr"},"zts_sockaddr")," ",Object(i.b)("em",{parentName:"td"}," addr, zts_socklen_t ")," addrlen)",Object(i.b)("br",null),"Get socket name.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_getpeername"},"zts_getpeername")),"(int fd, struct ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__sockaddr"},"zts_sockaddr")," ",Object(i.b)("em",{parentName:"td"}," addr, zts_socklen_t ")," addrlen)",Object(i.b)("br",null),"Get the peer name for the remote end of a connected socket.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_close"},"zts_close")),"(int fd)",Object(i.b)("br",null),"Close socket.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_select"},"zts_select")),"(int nfds, zts_fd_set ",Object(i.b)("em",{parentName:"td"}," readfds, zts_fd_set ")," writefds, zts_fd_set ",Object(i.b)("em",{parentName:"td"}," exceptfds, struct zts_timeval ")," timeout)",Object(i.b)("br",null),'Monitor multiple file descriptors for "readiness".')),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_fcntl"},"zts_fcntl")),"(int fd, int cmd, int flags)",Object(i.b)("br",null),"Issue file control commands on a socket.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_poll"},"zts_poll")),"(struct zts_pollfd * fds, zts_nfds_t nfds, int timeout)",Object(i.b)("br",null),"Wait for some event on a file descriptor.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_ioctl"},"zts_ioctl")),"(int fd, unsigned long request, void * argp)",Object(i.b)("br",null),"Control a device.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ssize_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_send"},"zts_send")),"(int fd, const void * buf, size_t len, int flags)",Object(i.b)("br",null),"Send data to remote host.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ssize_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_sendto"},"zts_sendto")),"(int fd, const void ",Object(i.b)("em",{parentName:"td"}," buf, size_t len, int flags, const struct ",Object(i.b)("a",{parentName:"em",href:"/autogen/libzt/classes/structzts__sockaddr"},"zts_sockaddr")," ")," addr, zts_socklen_t addrlen)",Object(i.b)("br",null),"Send data to remote host.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ssize_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_sendmsg"},"zts_sendmsg")),"(int fd, const struct zts_msghdr * msg, int flags)",Object(i.b)("br",null),"Send message to remote host.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ssize_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_recv"},"zts_recv")),"(int fd, void * buf, size_t len, int flags)",Object(i.b)("br",null),"Receive data from remote host.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ssize_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_recvfrom"},"zts_recvfrom")),"(int fd, void ",Object(i.b)("em",{parentName:"td"}," buf, size_t len, int flags, struct ",Object(i.b)("a",{parentName:"em",href:"/autogen/libzt/classes/structzts__sockaddr"},"zts_sockaddr")," ")," addr, zts_socklen_t * addrlen)",Object(i.b)("br",null),"Receive data from remote host.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ssize_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_recvmsg"},"zts_recvmsg")),"(int fd, struct zts_msghdr * msg, int flags)",Object(i.b)("br",null),"Receive a message from remote host.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ssize_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_read"},"zts_read")),"(int fd, void * buf, size_t len)",Object(i.b)("br",null),"Read data from socket onto buffer.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ssize_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_readv"},"zts_readv")),"(int fd, const struct zts_iovec * iov, int iovcnt)",Object(i.b)("br",null),"Read data from socket into multiple buffers.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ssize_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_write"},"zts_write")),"(int fd, const void * buf, size_t len)",Object(i.b)("br",null),"Write data from buffer to socket.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ssize_t"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_writev"},"zts_writev")),"(int fd, const struct zts_iovec * iov, int iovcnt)",Object(i.b)("br",null),"Write data from multiple buffers to socket.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_shutdown"},"zts_shutdown")),"(int fd, int how)",Object(i.b)("br",null),"Shut down some aspect of a socket.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_set_no_delay"},"zts_simple_set_no_delay")),"(int fd, int enabled)",Object(i.b)("br",null),"Enable or disable ",Object(i.b)("inlineCode",{parentName:"td"},"TCP_NODELAY"),". Enabling this is equivalent to turning off Nagle's algorithm.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_no_delay"},"zts_simple_get_no_delay")),"(int fd)",Object(i.b)("br",null),"Return whether ",Object(i.b)("inlineCode",{parentName:"td"},"TCP_NODELAY")," is enabled.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_set_linger"},"zts_simple_set_linger")),"(int fd, int enabled, int value)",Object(i.b)("br",null),"Enable or disable ",Object(i.b)("inlineCode",{parentName:"td"},"SO_LINGER")," while also setting its value.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_linger_enabled"},"zts_simple_get_linger_enabled")),"(int fd)",Object(i.b)("br",null),"Return whether ",Object(i.b)("inlineCode",{parentName:"td"},"SO_LINGER")," is enabled.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_linger_value"},"zts_simple_get_linger_value")),"(int fd)",Object(i.b)("br",null),"Return the value of ",Object(i.b)("inlineCode",{parentName:"td"},"SO_LINGER"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_set_reuse_addr"},"zts_simple_set_reuse_addr")),"(int fd, int enabled)",Object(i.b)("br",null),"Enable or disable ",Object(i.b)("inlineCode",{parentName:"td"},"SO_REUSEADDR"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_reuse_addr"},"zts_simple_get_reuse_addr")),"(int fd)",Object(i.b)("br",null),"Return whether ",Object(i.b)("inlineCode",{parentName:"td"},"SO_REUSEADDR")," is enabled.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_set_recv_timeout"},"zts_simple_set_recv_timeout")),"(int fd, int seconds, int microseconds)",Object(i.b)("br",null),"Set the value of ",Object(i.b)("inlineCode",{parentName:"td"},"SO_RCVTIMEO"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_recv_timeout"},"zts_simple_get_recv_timeout")),"(int fd)",Object(i.b)("br",null),"Return the value of ",Object(i.b)("inlineCode",{parentName:"td"},"SO_RCVTIMEO"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_set_send_timeout"},"zts_simple_set_send_timeout")),"(int fd, int seconds, int microseconds)",Object(i.b)("br",null),"Set the value of ",Object(i.b)("inlineCode",{parentName:"td"},"SO_SNDTIMEO"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_send_timeout"},"zts_simple_get_send_timeout")),"(int fd)",Object(i.b)("br",null),"Return the value of ",Object(i.b)("inlineCode",{parentName:"td"},"SO_SNDTIMEO"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_set_send_buf_size"},"zts_simple_set_send_buf_size")),"(int fd, int size)",Object(i.b)("br",null),"Set the value of ",Object(i.b)("inlineCode",{parentName:"td"},"SO_SNDBUF"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_send_buf_size"},"zts_simple_get_send_buf_size")),"(int fd)",Object(i.b)("br",null),"Return the value of ",Object(i.b)("inlineCode",{parentName:"td"},"SO_SNDBUF"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_set_recv_buf_size"},"zts_simple_set_recv_buf_size")),"(int fd, int size)",Object(i.b)("br",null),"Set the value of ",Object(i.b)("inlineCode",{parentName:"td"},"SO_RCVBUF"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_recv_buf_size"},"zts_simple_get_recv_buf_size")),"(int fd)",Object(i.b)("br",null),"Return the value of ",Object(i.b)("inlineCode",{parentName:"td"},"SO_RCVBUF"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_set_ttl"},"zts_simple_set_ttl")),"(int fd, int ttl)",Object(i.b)("br",null),"Set the value of ",Object(i.b)("inlineCode",{parentName:"td"},"IP_TTL"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_ttl"},"zts_simple_get_ttl")),"(int fd)",Object(i.b)("br",null),"Return the value of ",Object(i.b)("inlineCode",{parentName:"td"},"IP_TTL"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_set_blocking"},"zts_simple_set_blocking")),"(int fd, int enabled)",Object(i.b)("br",null),"Change blocking behavior ",Object(i.b)("inlineCode",{parentName:"td"},"O_NONBLOCK"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_blocking"},"zts_simple_get_blocking")),"(int fd)",Object(i.b)("br",null),"Return whether blocking mode ",Object(i.b)("inlineCode",{parentName:"td"},"O_NONBLOCK")," is enabled.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_set_keepalive"},"zts_simple_set_keepalive")),"(int fd, int enabled)",Object(i.b)("br",null),"Enable or disable ",Object(i.b)("inlineCode",{parentName:"td"},"SO_KEEPALIVE"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_simple_get_keepalive"},"zts_simple_get_keepalive")),"(int fd)",Object(i.b)("br",null),"Return whether ",Object(i.b)("inlineCode",{parentName:"td"},"SO_KEEPALIVE")," is enabled.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct zts_hostent *"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_gethostbyname"},"zts_gethostbyname")),"(const char * name)",Object(i.b)("br",null),"Resolve a host-name.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_dns_set_server"},"zts_dns_set_server")),"(uint8_t index, const ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__ip__addr"},"zts_ip_addr")," * addr)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"const ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__ip__addr"},"zts_ip_addr")," *"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_dns_get_server"},"zts_dns_get_server")),"(uint8_t index)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"char *"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_ipaddr_ntoa"},"zts_ipaddr_ntoa")),"(const ",Object(i.b)("a",{parentName:"td",href:"/autogen/libzt/classes/structzts__ip__addr"},"zts_ip_addr")," * addr)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_ipaddr_aton"},"zts_ipaddr_aton")),"(const char ",Object(i.b)("em",{parentName:"td"}," cp, ",Object(i.b)("a",{parentName:"em",href:"/autogen/libzt/classes/structzts__ip__addr"},"zts_ip_addr")," ")," addr)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"const char *"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_inet_ntop"},"zts_inet_ntop")),"(int family, const void ",Object(i.b)("em",{parentName:"td"}," src, char ")," dst, zts_socklen_t size)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_inet_pton"},"zts_inet_pton")),"(int family, const char ",Object(i.b)("em",{parentName:"td"}," src, void ")," dst)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"void"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_util_delay"},"zts_util_delay")),"(long interval_ms)",Object(i.b)("br",null),"Platform-agnostic delay (provided for convenience)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_util_get_ip_family"},"zts_util_get_ip_family")),"(const char * ipstr)",Object(i.b)("br",null),"Return the family type of the IP string.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_util_ipstr_to_saddr"},"zts_util_ipstr_to_saddr")),"(const char ",Object(i.b)("em",{parentName:"td"}," src_ipstr, int port, struct ",Object(i.b)("a",{parentName:"em",href:"/autogen/libzt/classes/structzts__sockaddr"},"zts_sockaddr")," ")," dstaddr, zts_socklen_t * addrlen)")))),Object(i.b)("h2",{id:"attributes"},"Attributes"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null}),Object(i.b)("th",{parentName:"tr",align:null},"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"int"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#variable-zts_errno"},"zts_errno")))))),Object(i.b)("h2",{id:"defines"},"Defines"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null}),Object(i.b)("th",{parentName:"tr",align:null},"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_mac_addrstrlen"},"ZTS_MAC_ADDRSTRLEN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_inet_addrstrlen"},"ZTS_INET_ADDRSTRLEN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_inet6_addrstrlen"},"ZTS_INET6_ADDRSTRLEN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ip_max_str_len"},"ZTS_IP_MAX_STR_LEN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_store_data_len"},"ZTS_STORE_DATA_LEN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_max_network_short_name_length"},"ZTS_MAX_NETWORK_SHORT_NAME_LENGTH")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_max_network_routes"},"ZTS_MAX_NETWORK_ROUTES")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_max_assigned_addresses"},"ZTS_MAX_ASSIGNED_ADDRESSES")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_max_peer_network_paths"},"ZTS_MAX_PEER_NETWORK_PATHS")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_max_multicast_subscriptions"},"ZTS_MAX_MULTICAST_SUBSCRIPTIONS")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_c_api_only"},"ZTS_C_API_ONLY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipaddr_none"},"ZTS_IPADDR_NONE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipaddr_loopback"},"ZTS_IPADDR_LOOPBACK")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipaddr_any"},"ZTS_IPADDR_ANY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipaddr_broadcast"},"ZTS_IPADDR_BROADCAST")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_inaddr_none"},"ZTS_INADDR_NONE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_inaddr_loopback"},"ZTS_INADDR_LOOPBACK")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_inaddr_any"},"ZTS_INADDR_ANY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_inaddr_broadcast"},"ZTS_INADDR_BROADCAST")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_sock_stream"},"ZTS_SOCK_STREAM")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_sock_dgram"},"ZTS_SOCK_DGRAM")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_sock_raw"},"ZTS_SOCK_RAW")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_af_unspec"},"ZTS_AF_UNSPEC")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_af_inet"},"ZTS_AF_INET")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_af_inet6"},"ZTS_AF_INET6")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pf_inet"},"ZTS_PF_INET")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pf_inet6"},"ZTS_PF_INET6")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pf_unspec"},"ZTS_PF_UNSPEC")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipproto_ip"},"ZTS_IPPROTO_IP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipproto_icmp"},"ZTS_IPPROTO_ICMP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipproto_tcp"},"ZTS_IPPROTO_TCP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipproto_udp"},"ZTS_IPPROTO_UDP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipproto_ipv6"},"ZTS_IPPROTO_IPV6")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipproto_icmpv6"},"ZTS_IPPROTO_ICMPV6")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipproto_udplite"},"ZTS_IPPROTO_UDPLITE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipproto_raw"},"ZTS_IPPROTO_RAW")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_msg_peek"},"ZTS_MSG_PEEK")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_msg_waitall"},"ZTS_MSG_WAITALL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_msg_oob"},"ZTS_MSG_OOB")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_msg_dontwait"},"ZTS_MSG_DONTWAIT")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_msg_more"},"ZTS_MSG_MORE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iocparm_mask"},"ZTS_IOCPARM_MASK")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ioc_void"},"ZTS_IOC_VOID")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ioc_out"},"ZTS_IOC_OUT")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ioc_in"},"ZTS_IOC_IN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ioc_inout"},"ZTS_IOC_INOUT")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_io"},"ZTS_IO")),"(x, y)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ior"},"ZTS_IOR")),"(x, y, t)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iow"},"ZTS_IOW")),"(x, y, t)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_fionread"},"ZTS_FIONREAD")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_fionbio"},"ZTS_FIONBIO")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-sin_zero_len"},"SIN_ZERO_LEN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_api"},"ZTS_API")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-ztcall"},"ZTCALL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_central_default_url"},"ZTS_CENTRAL_DEFAULT_URL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_cenrtal_max_url_len"},"ZTS_CENRTAL_MAX_URL_LEN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_central_token_len"},"ZTS_CENTRAL_TOKEN_LEN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_central_resp_buf_default_sz"},"ZTS_CENTRAL_RESP_BUF_DEFAULT_SZ")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_http_get"},"ZTS_HTTP_GET")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_http_post"},"ZTS_HTTP_POST")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_http_delete"},"ZTS_HTTP_DELETE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_central_node_auth_false"},"ZTS_CENTRAL_NODE_AUTH_FALSE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_central_node_auth_true"},"ZTS_CENTRAL_NODE_AUTH_TRUE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_central_read"},"ZTS_CENTRAL_READ")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_central_write"},"ZTS_CENTRAL_WRITE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_id_str_buf_len"},"ZTS_ID_STR_BUF_LEN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_sol_socket"},"ZTS_SOL_SOCKET")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_debug"},"ZTS_SO_DEBUG")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_acceptconn"},"ZTS_SO_ACCEPTCONN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_reuseaddr"},"ZTS_SO_REUSEADDR")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_keepalive"},"ZTS_SO_KEEPALIVE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_dontroute"},"ZTS_SO_DONTROUTE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_broadcast"},"ZTS_SO_BROADCAST")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_useloopback"},"ZTS_SO_USELOOPBACK")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_linger"},"ZTS_SO_LINGER")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_dontlinger"},"ZTS_SO_DONTLINGER")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_oobinline"},"ZTS_SO_OOBINLINE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_reuseport"},"ZTS_SO_REUSEPORT")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_sndbuf"},"ZTS_SO_SNDBUF")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_rcvbuf"},"ZTS_SO_RCVBUF")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_sndlowat"},"ZTS_SO_SNDLOWAT")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_rcvlowat"},"ZTS_SO_RCVLOWAT")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_sndtimeo"},"ZTS_SO_SNDTIMEO")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_rcvtimeo"},"ZTS_SO_RCVTIMEO")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_error"},"ZTS_SO_ERROR")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_type"},"ZTS_SO_TYPE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_contimeo"},"ZTS_SO_CONTIMEO")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_no_check"},"ZTS_SO_NO_CHECK")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_so_bindtodevice"},"ZTS_SO_BINDTODEVICE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ip_tos"},"ZTS_IP_TOS")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ip_ttl"},"ZTS_IP_TTL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ip_pktinfo"},"ZTS_IP_PKTINFO")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_tcp_nodelay"},"ZTS_TCP_NODELAY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_tcp_keepalive"},"ZTS_TCP_KEEPALIVE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_tcp_keepidle"},"ZTS_TCP_KEEPIDLE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_tcp_keepintvl"},"ZTS_TCP_KEEPINTVL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_tcp_keepcnt"},"ZTS_TCP_KEEPCNT")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipv6_checksum"},"ZTS_IPV6_CHECKSUM")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipv6_v6only"},"ZTS_IPV6_V6ONLY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_udplite_send_cscov"},"ZTS_UDPLITE_SEND_CSCOV")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_udplite_recv_cscov"},"ZTS_UDPLITE_RECV_CSCOV")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ip_multicast_ttl"},"ZTS_IP_MULTICAST_TTL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ip_multicast_if"},"ZTS_IP_MULTICAST_IF")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ip_multicast_loop"},"ZTS_IP_MULTICAST_LOOP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ip_add_membership"},"ZTS_IP_ADD_MEMBERSHIP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ip_drop_membership"},"ZTS_IP_DROP_MEMBERSHIP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipv6_join_group"},"ZTS_IPV6_JOIN_GROUP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipv6_add_membership"},"ZTS_IPV6_ADD_MEMBERSHIP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipv6_leave_group"},"ZTS_IPV6_LEAVE_GROUP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_ipv6_drop_membership"},"ZTS_IPV6_DROP_MEMBERSHIP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_tos_mask"},"ZTS_IPTOS_TOS_MASK")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_tos"},"ZTS_IPTOS_TOS")),"(tos)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_lowdelay"},"ZTS_IPTOS_LOWDELAY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_throughput"},"ZTS_IPTOS_THROUGHPUT")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_reliability"},"ZTS_IPTOS_RELIABILITY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_lowcost"},"ZTS_IPTOS_LOWCOST")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_mincost"},"ZTS_IPTOS_MINCOST")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_prec_mask"},"ZTS_IPTOS_PREC_MASK")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_prec"},"ZTS_IPTOS_PREC")),"(tos)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_prec_netcontrol"},"ZTS_IPTOS_PREC_NETCONTROL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_prec_internetcontrol"},"ZTS_IPTOS_PREC_INTERNETCONTROL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_prec_critic_ecp"},"ZTS_IPTOS_PREC_CRITIC_ECP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_prec_flashoverride"},"ZTS_IPTOS_PREC_FLASHOVERRIDE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_prec_flash"},"ZTS_IPTOS_PREC_FLASH")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_prec_immediate"},"ZTS_IPTOS_PREC_IMMEDIATE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_prec_priority"},"ZTS_IPTOS_PREC_PRIORITY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_iptos_prec_routine"},"ZTS_IPTOS_PREC_ROUTINE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-lwip_socket_offset"},"LWIP_SOCKET_OFFSET")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-memp_num_netconn"},"MEMP_NUM_NETCONN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_fd_setsize"},"ZTS_FD_SETSIZE")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_fdsetsafeset"},"ZTS_FDSETSAFESET")),"(n, code)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_fdsetsafeget"},"ZTS_FDSETSAFEGET")),"(n, code)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_fd_set"},"ZTS_FD_SET")),"(n, p)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_fd_clr"},"ZTS_FD_CLR")),"(n, p)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_fd_isset"},"ZTS_FD_ISSET")),"(n, p)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_fd_zero"},"ZTS_FD_ZERO")),"(p)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_f_getfl"},"ZTS_F_GETFL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_f_setfl"},"ZTS_F_SETFL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_o_nonblock"},"ZTS_O_NONBLOCK")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_o_ndelay"},"ZTS_O_NDELAY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_o_rdonly"},"ZTS_O_RDONLY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_o_wronly"},"ZTS_O_WRONLY")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_o_rdwr"},"ZTS_O_RDWR")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pollin"},"ZTS_POLLIN")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pollout"},"ZTS_POLLOUT")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pollerr"},"ZTS_POLLERR")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pollnval"},"ZTS_POLLNVAL")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pollrdnorm"},"ZTS_POLLRDNORM")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pollrdband"},"ZTS_POLLRDBAND")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pollpri"},"ZTS_POLLPRI")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pollwrnorm"},"ZTS_POLLWRNORM")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pollwrband"},"ZTS_POLLWRBAND")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_pollhup"},"ZTS_POLLHUP")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_msg_trunc"},"ZTS_MSG_TRUNC")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_msg_ctrunc"},"ZTS_MSG_CTRUNC")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_shut_rd"},"ZTS_SHUT_RD")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_shut_wr"},"ZTS_SHUT_WR")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-zts_shut_rdwr"},"ZTS_SHUT_RDWR")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null}),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/autogen/libzt/files/_zero_tier_sockets_8h#define-h_addr"},"h_addr")))))),Object(i.b)("h2",{id:"detailed-description"},"Detailed Description"),Object(i.b)("p",null,"This defines the external C API for ZeroTier Sockets "),Object(i.b)("h2",{id:"types-documentation"},"Types Documentation"),Object(i.b)("h3",{id:"enum-zts_error_t"},"enum zts_error_t"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(i.b)("th",{parentName:"tr",align:null},"Value"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ERR_OK"),Object(i.b)("td",{parentName:"tr",align:null},"0"),Object(i.b)("td",{parentName:"tr",align:null},"No error")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ERR_SOCKET"),Object(i.b)("td",{parentName:"tr",align:null},"-1"),Object(i.b)("td",{parentName:"tr",align:null},"Socket error, see ",Object(i.b)("inlineCode",{parentName:"td"},"zts_errno"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ERR_SERVICE"),Object(i.b)("td",{parentName:"tr",align:null},"-2"),Object(i.b)("td",{parentName:"tr",align:null},"This operation is not allowed at this time. Or possibly the node hasn't been started")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ERR_ARG"),Object(i.b)("td",{parentName:"tr",align:null},"-3"),Object(i.b)("td",{parentName:"tr",align:null},"Invalid argument")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ERR_NO_RESULT"),Object(i.b)("td",{parentName:"tr",align:null},"-4"),Object(i.b)("td",{parentName:"tr",align:null},"No result (not necessarily an error)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ERR_GENERAL"),Object(i.b)("td",{parentName:"tr",align:null},"-5"),Object(i.b)("td",{parentName:"tr",align:null},"Consider filing a bug report")))),Object(i.b)("p",null,"Common error return values "),Object(i.b)("h3",{id:"enum-zts_event_t"},"enum zts_event_t"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(i.b)("th",{parentName:"tr",align:null},"Value"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EVENT_NODE_UP"),Object(i.b)("td",{parentName:"tr",align:null},"200"),Object(i.b)("td",{parentName:"tr",align:null},"Node has been initialized")))),Object(i.b)("p",null,"This is the first event generated, and is always sent. It may occur before node's constructor returns.  |\n| ZTS_EVENT_NODE_ONLINE | 201|  Node is online ","\u2013"," at least one upstream node appears reachable  |\n| ZTS_EVENT_NODE_OFFLINE | 202|  Node is offline ","\u2013"," network does not seem to be reachable by any available strategy  |\n| ZTS_EVENT_NODE_DOWN | 203|  Node is shutting down"),Object(i.b)("p",null,"This is generated within Node's destructor when it is being shut down. It's done for convenience, since cleaning up other state in the event handler may appear more idiomatic.  |\n| ZTS_EVENT_NODE_FATAL_ERROR | 204|  A fatal error has occurred. One possible reason is:"),Object(i.b)("p",null,"Your identity has collided with another node's ZeroTier address"),Object(i.b)("p",null,"This happens if two different public keys both hash (via the algorithm in Identity::generate()) to the same 40-bit ZeroTier address."),Object(i.b)("p",null,'This is something you should "never" see, where "never" is defined as once per 2^39 new node initializations / identity creations. If you do see it, you\'re going to see it very soon after a node is first initialized.'),Object(i.b)("p",null,"This is reported as an event rather than a return code since it's detected asynchronously via error messages from authoritative nodes."),Object(i.b)("p",null,"If this occurs, you must shut down and delete the node, delete the identity.secret record/file from the data store, and restart to generate a new identity. If you don't do this, you will not be able to communicate with other nodes."),Object(i.b)("p",null,"We'd automate this process, but we don't think silently deleting private keys or changing our address without telling the calling code is good form. It violates the principle of least surprise."),Object(i.b)("p",null,"You can technically get away with not handling this, but we recommend doing so in a mature reliable application. Besides, handling this condition is a good way to make sure it never arises. It's like how umbrellas prevent rain and smoke detectors prevent fires. They do, right?"),Object(i.b)("p",null,"Meta-data: none  |\n| ZTS_EVENT_NETWORK_NOT_FOUND | 210|  Network ID does not correspond to a known network  |\n| ZTS_EVENT_NETWORK_CLIENT_TOO_OLD | 211|  The version of ZeroTier inside libzt is too old  |\n| ZTS_EVENT_NETWORK_REQ_CONFIG | 212|  The configuration for a network has been requested (no action needed)  |\n| ZTS_EVENT_NETWORK_OK | 213|  The node joined the network successfully (no action needed)  |\n| ZTS_EVENT_NETWORK_ACCESS_DENIED | 214|  The node is not allowed to join the network (you must authorize node)  |\n| ZTS_EVENT_NETWORK_READY_IP4 | 215|  The node has received an IPv4 address from the network controller  |\n| ZTS_EVENT_NETWORK_READY_IP6 | 216|  The node has received an IPv6 address from the network controller  |\n| ZTS_EVENT_NETWORK_READY_IP4_IP6 | 217|  Deprecated  |\n| ZTS_EVENT_NETWORK_DOWN | 218|  Network controller is unreachable  |\n| ZTS_EVENT_NETWORK_UPDATE | 219|  Network change received from controller  |\n| ZTS_EVENT_STACK_UP | 220|  TCP/IP stack (lwIP) is up (for debug purposes)  |\n| ZTS_EVENT_STACK_DOWN | 221|  TCP/IP stack (lwIP) id down (for debug purposes)  |\n| ZTS_EVENT_NETIF_UP | 230|  lwIP netif up (for debug purposes)  |\n| ZTS_EVENT_NETIF_DOWN | 231|  lwIP netif down (for debug purposes)  |\n| ZTS_EVENT_NETIF_REMOVED | 232|  lwIP netif removed (for debug purposes)  |\n| ZTS_EVENT_NETIF_LINK_UP | 233|  lwIP netif link up (for debug purposes)  |\n| ZTS_EVENT_NETIF_LINK_DOWN | 234|  lwIP netif link down (for debug purposes)  |\n| ZTS_EVENT_PEER_DIRECT | 240|  A direct P2P path to peer is known  |\n| ZTS_EVENT_PEER_RELAY | 241|  A direct P2P path to peer is NOT known. Traffic is now relayed  |\n| ZTS_EVENT_PEER_UNREACHABLE | 242|  A peer is unreachable. Check NAT/Firewall settings  |\n| ZTS_EVENT_PEER_PATH_DISCOVERED | 243|  A new path to a peer was discovered  |\n| ZTS_EVENT_PEER_PATH_DEAD | 244|  A known path to a peer is now considered dead  |\n| ZTS_EVENT_ROUTE_ADDED | 250|  A new managed network route was added  |\n| ZTS_EVENT_ROUTE_REMOVED | 251|  A managed network route was removed  |\n| ZTS_EVENT_ADDR_ADDED_IP4 | 260|  A new managed IPv4 address was assigned to this peer  |\n| ZTS_EVENT_ADDR_REMOVED_IP4 | 261|  A managed IPv4 address assignment was removed from this peer  |\n| ZTS_EVENT_ADDR_ADDED_IP6 | 262|  A new managed IPv4 address was assigned to this peer  |\n| ZTS_EVENT_ADDR_REMOVED_IP6 | 263|  A managed IPv6 address assignment was removed from this peer  |\n| ZTS_EVENT_STORE_IDENTITY_SECRET | 270|  The node's secret key (identity)  |\n| ZTS_EVENT_STORE_IDENTITY_PUBLIC | 271|  The node's public key (identity)  |\n| ZTS_EVENT_STORE_PLANET | 272|  The node has received an updated planet config  |\n| ZTS_EVENT_STORE_PEER | 273|  New reachability hints and peer configuration  |\n| ZTS_EVENT_STORE_NETWORK | 274|  New network config  |"),Object(i.b)("p",null,"Event codes used by the (optional) callback API "),Object(i.b)("h3",{id:"enum-zts_errno_t"},"enum zts_errno_t"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(i.b)("th",{parentName:"tr",align:null},"Value"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EPERM"),Object(i.b)("td",{parentName:"tr",align:null},"1"),Object(i.b)("td",{parentName:"tr",align:null},"Operation not permitted (",Object(i.b)("inlineCode",{parentName:"td"},"zts_errno")," value)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENOENT"),Object(i.b)("td",{parentName:"tr",align:null},"2"),Object(i.b)("td",{parentName:"tr",align:null},"No such file or directory")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ESRCH"),Object(i.b)("td",{parentName:"tr",align:null},"3"),Object(i.b)("td",{parentName:"tr",align:null},"No such process")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EINTR"),Object(i.b)("td",{parentName:"tr",align:null},"4"),Object(i.b)("td",{parentName:"tr",align:null},"Interrupted system call")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EIO"),Object(i.b)("td",{parentName:"tr",align:null},"5"),Object(i.b)("td",{parentName:"tr",align:null},"I/O error")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENXIO"),Object(i.b)("td",{parentName:"tr",align:null},"6"),Object(i.b)("td",{parentName:"tr",align:null},"No such device or address")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EBADF"),Object(i.b)("td",{parentName:"tr",align:null},"9"),Object(i.b)("td",{parentName:"tr",align:null},"Bad file number")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EAGAIN"),Object(i.b)("td",{parentName:"tr",align:null},"11"),Object(i.b)("td",{parentName:"tr",align:null},"Try again")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EWOULDBLOCK"),Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EAGAIN"),Object(i.b)("td",{parentName:"tr",align:null},"Operation would block")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENOMEM"),Object(i.b)("td",{parentName:"tr",align:null},"12"),Object(i.b)("td",{parentName:"tr",align:null},"Out of memory")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EACCES"),Object(i.b)("td",{parentName:"tr",align:null},"13"),Object(i.b)("td",{parentName:"tr",align:null},"Permission denied")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EFAULT"),Object(i.b)("td",{parentName:"tr",align:null},"14"),Object(i.b)("td",{parentName:"tr",align:null},"Bad address")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EBUSY"),Object(i.b)("td",{parentName:"tr",align:null},"16"),Object(i.b)("td",{parentName:"tr",align:null},"Device or resource busy")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EEXIST"),Object(i.b)("td",{parentName:"tr",align:null},"17"),Object(i.b)("td",{parentName:"tr",align:null},"File exists")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENODEV"),Object(i.b)("td",{parentName:"tr",align:null},"19"),Object(i.b)("td",{parentName:"tr",align:null},"No such device")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EINVAL"),Object(i.b)("td",{parentName:"tr",align:null},"22"),Object(i.b)("td",{parentName:"tr",align:null},"Invalid argument")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENFILE"),Object(i.b)("td",{parentName:"tr",align:null},"23"),Object(i.b)("td",{parentName:"tr",align:null},"File table overflow")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EMFILE"),Object(i.b)("td",{parentName:"tr",align:null},"24"),Object(i.b)("td",{parentName:"tr",align:null},"Too many open files")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENOSYS"),Object(i.b)("td",{parentName:"tr",align:null},"38"),Object(i.b)("td",{parentName:"tr",align:null},"Function not implemented")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENOTSOCK"),Object(i.b)("td",{parentName:"tr",align:null},"88"),Object(i.b)("td",{parentName:"tr",align:null},"Socket operation on non-socket")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EDESTADDRREQ"),Object(i.b)("td",{parentName:"tr",align:null},"89"),Object(i.b)("td",{parentName:"tr",align:null},"Destination address required")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EMSGSIZE"),Object(i.b)("td",{parentName:"tr",align:null},"90"),Object(i.b)("td",{parentName:"tr",align:null},"Message too long")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EPROTOTYPE"),Object(i.b)("td",{parentName:"tr",align:null},"91"),Object(i.b)("td",{parentName:"tr",align:null},"Protocol wrong type for socket")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENOPROTOOPT"),Object(i.b)("td",{parentName:"tr",align:null},"92"),Object(i.b)("td",{parentName:"tr",align:null},"Protocol not available")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EPROTONOSUPPORT"),Object(i.b)("td",{parentName:"tr",align:null},"93"),Object(i.b)("td",{parentName:"tr",align:null},"Protocol not supported")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ESOCKTNOSUPPORT"),Object(i.b)("td",{parentName:"tr",align:null},"94"),Object(i.b)("td",{parentName:"tr",align:null},"Socket type not supported")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EOPNOTSUPP"),Object(i.b)("td",{parentName:"tr",align:null},"95"),Object(i.b)("td",{parentName:"tr",align:null},"Operation not supported on transport endpoint")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EPFNOSUPPORT"),Object(i.b)("td",{parentName:"tr",align:null},"96"),Object(i.b)("td",{parentName:"tr",align:null},"Protocol family not supported")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EAFNOSUPPORT"),Object(i.b)("td",{parentName:"tr",align:null},"97"),Object(i.b)("td",{parentName:"tr",align:null},"Address family not supported by protocol")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EADDRINUSE"),Object(i.b)("td",{parentName:"tr",align:null},"98"),Object(i.b)("td",{parentName:"tr",align:null},"Address already in use")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EADDRNOTAVAIL"),Object(i.b)("td",{parentName:"tr",align:null},"99"),Object(i.b)("td",{parentName:"tr",align:null},"Cannot assign requested address")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENETDOWN"),Object(i.b)("td",{parentName:"tr",align:null},"100"),Object(i.b)("td",{parentName:"tr",align:null},"Network is down")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENETUNREACH"),Object(i.b)("td",{parentName:"tr",align:null},"101"),Object(i.b)("td",{parentName:"tr",align:null},"Network is unreachable")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ECONNABORTED"),Object(i.b)("td",{parentName:"tr",align:null},"103"),Object(i.b)("td",{parentName:"tr",align:null},"Software caused connection abort")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ECONNRESET"),Object(i.b)("td",{parentName:"tr",align:null},"104"),Object(i.b)("td",{parentName:"tr",align:null},"Connection reset by peer")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENOBUFS"),Object(i.b)("td",{parentName:"tr",align:null},"105"),Object(i.b)("td",{parentName:"tr",align:null},"No buffer space available")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EISCONN"),Object(i.b)("td",{parentName:"tr",align:null},"106"),Object(i.b)("td",{parentName:"tr",align:null},"Transport endpoint is already connected")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ENOTCONN"),Object(i.b)("td",{parentName:"tr",align:null},"107"),Object(i.b)("td",{parentName:"tr",align:null},"Transport endpoint is not connected")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_ETIMEDOUT"),Object(i.b)("td",{parentName:"tr",align:null},"110"),Object(i.b)("td",{parentName:"tr",align:null},"Connection timed out")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EHOSTUNREACH"),Object(i.b)("td",{parentName:"tr",align:null},"113"),Object(i.b)("td",{parentName:"tr",align:null},"No route to host")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EALREADY"),Object(i.b)("td",{parentName:"tr",align:null},"114"),Object(i.b)("td",{parentName:"tr",align:null},"Operation already in progress")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_EINPROGRESS"),Object(i.b)("td",{parentName:"tr",align:null},"115"),Object(i.b)("td",{parentName:"tr",align:null},"Operation now in progress")))),Object(i.b)("h3",{id:"enum-zts_network_status_t"},"enum zts_network_status_t"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(i.b)("th",{parentName:"tr",align:null},"Value"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_NETWORK_STATUS_REQUESTING_CONFIGURATION"),Object(i.b)("td",{parentName:"tr",align:null},"0"),Object(i.b)("td",{parentName:"tr",align:null},"Waiting for network configuration (also means revision == 0)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_NETWORK_STATUS_OK"),Object(i.b)("td",{parentName:"tr",align:null},"1"),Object(i.b)("td",{parentName:"tr",align:null},"Configuration received and we are authorized")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_NETWORK_STATUS_ACCESS_DENIED"),Object(i.b)("td",{parentName:"tr",align:null},"2"),Object(i.b)("td",{parentName:"tr",align:null},"Netconf master told us 'nope'")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_NETWORK_STATUS_NOT_FOUND"),Object(i.b)("td",{parentName:"tr",align:null},"3"),Object(i.b)("td",{parentName:"tr",align:null},"Netconf master exists, but this virtual network does not")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_NETWORK_STATUS_PORT_ERROR"),Object(i.b)("td",{parentName:"tr",align:null},"4"),Object(i.b)("td",{parentName:"tr",align:null},"Initialization of network failed or other internal error")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_NETWORK_STATUS_CLIENT_TOO_OLD"),Object(i.b)("td",{parentName:"tr",align:null},"5"),Object(i.b)("td",{parentName:"tr",align:null},"ZeroTier core version too old")))),Object(i.b)("p",null,"Virtual network status codes "),Object(i.b)("h3",{id:"enum-zts_net_info_type_t"},"enum zts_net_info_type_t"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(i.b)("th",{parentName:"tr",align:null},"Value"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_NETWORK_TYPE_PRIVATE"),Object(i.b)("td",{parentName:"tr",align:null},"0"),Object(i.b)("td",{parentName:"tr",align:null},"Private networks are authorized via certificates of membership")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_NETWORK_TYPE_PUBLIC"),Object(i.b)("td",{parentName:"tr",align:null},"1"),Object(i.b)("td",{parentName:"tr",align:null},"Public networks have no access control ","\u2013"," they'll always be AUTHORIZED")))),Object(i.b)("p",null,"Virtual network type codes "),Object(i.b)("h3",{id:"enum-zts_peer_role_t"},"enum zts_peer_role_t"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(i.b)("th",{parentName:"tr",align:null},"Value"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_PEER_ROLE_LEAF"),Object(i.b)("td",{parentName:"tr",align:null},"0"),Object(i.b)("td",{parentName:"tr",align:null},"Ordinary node")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_PEER_ROLE_MOON"),Object(i.b)("td",{parentName:"tr",align:null},"1"),Object(i.b)("td",{parentName:"tr",align:null},"Moon root")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ZTS_PEER_ROLE_PLANET"),Object(i.b)("td",{parentName:"tr",align:null},"2"),Object(i.b)("td",{parentName:"tr",align:null},"Planetary root")))),Object(i.b)("p",null,"The peer's trust hierarchy role "),Object(i.b)("h3",{id:"typedef-zts_socklen_t"},"typedef zts_socklen_t"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"typedef uint32_t zts_socklen_t;\n")),Object(i.b)("h3",{id:"typedef-zts_in_addr_t"},"typedef zts_in_addr_t"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"typedef uint32_t zts_in_addr_t;\n")),Object(i.b)("h3",{id:"typedef-zts_in_port_t"},"typedef zts_in_port_t"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"typedef uint16_t zts_in_port_t;\n")),Object(i.b)("h3",{id:"typedef-zts_sa_family_t"},"typedef zts_sa_family_t"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"typedef uint8_t zts_sa_family_t;\n")),Object(i.b)("h3",{id:"typedef-zts_ip_mreq"},"typedef zts_ip_mreq"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"typedef struct zts_ip_mreq zts_ip_mreq;\n")),Object(i.b)("h3",{id:"typedef-zts_ipv6_mreq"},"typedef zts_ipv6_mreq"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"typedef struct zts_ipv6_mreq zts_ipv6_mreq;\n")),Object(i.b)("h3",{id:"typedef-zts_fd_set"},"typedef zts_fd_set"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"typedef struct zts_fd_set zts_fd_set;\n")),Object(i.b)("h3",{id:"typedef-zts_timeval"},"typedef zts_timeval"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"typedef struct zts_timeval zts_timeval;\n")),Object(i.b)("h3",{id:"typedef-zts_nfds_t"},"typedef zts_nfds_t"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"typedef unsigned int zts_nfds_t;\n")),Object(i.b)("h3",{id:"typedef-zts_ip_addr"},"typedef zts_ip_addr"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"typedef struct zts_ip_addr zts_ip_addr;\n")),Object(i.b)("p",null,"A union struct for both IP version's addresses. ATTENTION: watch out for its size when adding IPv6 address scope! "),Object(i.b)("h2",{id:"functions-documentation"},"Functions Documentation"),Object(i.b)("h3",{id:"function-zts_central_set_access_mode"},"function zts_central_set_access_mode"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_set_access_mode(\n    int8_t modes\n)\n")),Object(i.b)("p",null,"Enable read/write capability. Default before calling this is read-only: ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_CENTRAL_READ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"modes")," ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_CENTRAL_READ")," and/or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_CENTRAL_WRITE"),". Whether the API allows read, write, or both")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful. ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_central_set_verbose"},"function zts_central_set_verbose"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_set_verbose(\n    int8_t is_verbose\n)\n")),Object(i.b)("p",null,"Enable or disable libcurl verbosity. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"is_verbose")," ",Object(i.b)("inlineCode",{parentName:"li"},"[1, 0]"),", Whether debug information is desired")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful. ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_central_clear_resp_buf"},"function zts_central_clear_resp_buf"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"void zts_central_clear_resp_buf()\n")),Object(i.b)("h3",{id:"function-zts_central_init"},"function zts_central_init"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_init(\n    const char * url_str,\n    const char * token_str,\n    char * resp_buf,\n    uint32_t buf_len\n)\n")),Object(i.b)("p",null,"Set the Central API ",Object(i.b)("inlineCode",{parentName:"p"},"URL")," and user API token. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"url_str")," The URL to the Central API server "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"token_str")," User API token "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"resp_buf")," Destination buffer for raw ",Object(i.b)("inlineCode",{parentName:"li"},"JSON")," output "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"buf_len")," Size of buffer for server response (specify ",Object(i.b)("inlineCode",{parentName:"li"},"0")," for default size) ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_central_cleanup"},"function zts_central_cleanup"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"void zts_central_cleanup()\n")),Object(i.b)("h3",{id:"function-zts_central_get_last_resp_buf"},"function zts_central_get_last_resp_buf"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_get_last_resp_buf(\n    char * dst,\n    int len\n)\n")),Object(i.b)("p",null,"Copies the ",Object(i.b)("inlineCode",{parentName:"p"},"JSON"),"-formatted string buffer from the last request into a user-provided buffer. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dst")," User-provided destination buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of aforementioned buffer ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if all contents were copied successfully. ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if provided buffer was too small. "),Object(i.b)("h3",{id:"function-zts_central_status_get"},"function zts_central_status_get"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_status_get(\n    int * http_resp_code\n)\n")),Object(i.b)("p",null,"Get the status of the Central API server. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Standard HTTP response codes. "),Object(i.b)("h3",{id:"function-zts_central_self_get"},"function zts_central_self_get"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_self_get(\n    int * http_resp_code\n)\n")),Object(i.b)("p",null,"Get the currently authenticated user\u2019s record. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Standard HTTP response codes. "),Object(i.b)("h3",{id:"function-zts_central_net_get"},"function zts_central_net_get"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_net_get(\n    int * http_resp_code,\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Retrieve a ",Object(i.b)("inlineCode",{parentName:"p"},"Network"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Standard HTTP response codes. "),Object(i.b)("h3",{id:"function-zts_central_net_update"},"function zts_central_net_update"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_net_update(\n    int * http_resp_code,\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Update or create a ",Object(i.b)("inlineCode",{parentName:"p"},"Network"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Standard HTTP response codes. "),Object(i.b)("p",null,"Only fields marked as ","[rw]"," can be directly modified. If other fields are present in the posted request they are ignored. New networks can be created by POSTing to /api/network with no net_id parameter. The server will create a random unused network ID and return the new network record."),Object(i.b)("h3",{id:"function-zts_central_net_delete"},"function zts_central_net_delete"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_net_delete(\n    int * http_resp_code,\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Delete a Network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Standard HTTP response codes. "),Object(i.b)("p",null,"Delete a network and all its related information permanently. Use extreme caution as this cannot be undone!"),Object(i.b)("h3",{id:"function-zts_central_net_get_all"},"function zts_central_net_get_all"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_net_get_all(\n    int * http_resp_code\n)\n")),Object(i.b)("p",null,"Get All Viewable Networks. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Standard HTTP response codes. "),Object(i.b)("p",null,"Get all networks for which you have at least read access."),Object(i.b)("h3",{id:"function-zts_central_member_get"},"function zts_central_member_get"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_member_get(\n    int * http_resp_code,\n    uint64_t net_id,\n    uint64_t node_id\n)\n")),Object(i.b)("p",null,"Retrieve a Member. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Standard HTTP response codes. "),Object(i.b)("h3",{id:"function-zts_central_member_update"},"function zts_central_member_update"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_member_update(\n    int * http_resp_code,\n    uint64_t net_id,\n    uint64_t node_id,\n    char * post_data\n)\n")),Object(i.b)("p",null,"Update or add a Member. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Standard HTTP response codes. "),Object(i.b)("p",null,"New members can be added to a network by POSTing them."),Object(i.b)("h3",{id:"function-zts_central_node_auth"},"function zts_central_node_auth"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_node_auth(\n    int * http_resp_code,\n    uint64_t net_id,\n    uint64_t node_id,\n    uint8_t is_authed\n)\n")),Object(i.b)("p",null,"Authorize or (De)authorize a node on a network. This operation is idempotent. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"node_id")," Node ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"is_authed")," Boolean value for whether this node should be authorized ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_central_net_get_members"},"function zts_central_net_get_members"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_central_net_get_members(\n    int * http_resp_code,\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Get All Members of a Network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Standard HTTP response codes. "),Object(i.b)("p",null,"Get all members of a network for which you have at least read access."),Object(i.b)("h3",{id:"function-zts_id_new"},"function zts_id_new"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_id_new(\n    char * key,\n    uint16_t * key_buf_len\n)\n")),Object(i.b)("p",null,"Generates a node identity (public/secret key-pair) and stores it in a user-provided buffer. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"key")," User-provided destination buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"key_buf_len")," Length of user-provided destination buffer. Will be set to the number of bytes copied. ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_id_pair_is_valid"},"function zts_id_pair_is_valid"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_id_pair_is_valid(\n    const char * key,\n    int len\n)\n")),Object(i.b)("p",null,"Verifies that a key-pair is valid. Checks formatting and pairing of key to address. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"key")," Buffer containing key-pair "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of key-pair buffer ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," if true, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," if false. "),Object(i.b)("h3",{id:"function-zts_init_from_storage"},"function zts_init_from_storage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_init_from_storage(\n    const char * path\n)\n")),Object(i.b)("p",null,"Instruct ZeroTier to look for node identity files at the given location. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_start()]()"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"port")," Path Null-terminated file-system path string ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("p",null,"Note that calling this function is not mandatory and if it is not called the node's keys will be kept in memory and retrievable via ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_get_id_pair()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_get_id_pair)"),"."),Object(i.b)("p",null,"See also: ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_init_from_memory()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_memory)")),Object(i.b)("h3",{id:"function-zts_init_from_memory"},"function zts_init_from_memory"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_init_from_memory(\n    const char * key,\n    uint16_t len\n)\n")),Object(i.b)("p",null,"Instruct ZeroTier to use the identity provided in ",Object(i.b)("inlineCode",{parentName:"p"},"key"),". This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_start()]()"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"key")," Path Null-terminated file-system path string "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of ",Object(i.b)("inlineCode",{parentName:"li"},"key")," buffer ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("p",null,"Note that calling this function is not mandatory and if it is not called the node's keys will be kept in memory and retrievable via ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_get_id_pair()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_get_id_pair)"),"."),Object(i.b)("p",null,"See also: ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_init_from_storage()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_storage)")),Object(i.b)("h3",{id:"function-zts_init_set_event_handler"},"function zts_init_set_event_handler"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_init_set_event_handler(\n    void(*)(void *) callback\n)\n")),Object(i.b)("p",null,"Set the event handler function. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_start()]()"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"callback")," A function pointer to the event handler function "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"family")," ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET"),", or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET6"))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_init_blacklist_if"},"function zts_init_blacklist_if"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_init_blacklist_if(\n    const char * prefix,\n    int len\n)\n")),Object(i.b)("p",null,"Blacklist an interface prefix (or name). This prevents ZeroTier from sending traffic over matching interfaces. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_start()]()"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"prefix")," Null-terminated interface prefix string "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of prefix string ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_init_set_planet"},"function zts_init_set_planet"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_init_set_planet(\n    const char * planet_data,\n    int len\n)\n")),Object(i.b)("p",null,"Present a planet definition for ZeroTier to use instead of the default. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_start()]()"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"planet_data")," Array of planet definition data (binary) "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of binary data ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_init_set_port"},"function zts_init_set_port"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_init_set_port(\n    unsigned short port\n)\n")),Object(i.b)("p",null,"Set the port to which the node should bind. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_start()]()"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"port")," Port number ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_init_allow_net_cache"},"function zts_init_allow_net_cache"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_init_allow_net_cache(\n    int allowed\n)\n")),Object(i.b)("p",null,"Enable or disable whether the node will cache network details (enabled by default when ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_init_from_storage()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_storage)")," is used.) Must be called before ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_start()]()"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"enabled")," Whether or not this feature is enabled ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("p",null,"This can potentially shorten (startup) times between node restarts. This allows the service to nearly instantly inform the network stack of an address to use for this peer so that it can create a transport service. This can be disabled for cases where one may not want network config details to be written to storage. This is especially useful for situations where address assignments do not change often."),Object(i.b)("p",null,"See also: ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_init_allow_peer_cache()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_allow_peer_cache)")),Object(i.b)("h3",{id:"function-zts_init_allow_peer_cache"},"function zts_init_allow_peer_cache"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_init_allow_peer_cache(\n    int allowed\n)\n")),Object(i.b)("p",null,"Enable or disable whether the node will cache peer details (enabled by default when ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_init_from_storage()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_storage)")," is used.) Must be called before ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_start()]()"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"enabled")," Whether or not this feature is enabled ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("p",null,"This can potentially shorten (connection) times between node restarts. This allows the service to re-use previously discovered paths to a peer, this prevents the service from having to go through the entire transport-triggered link provisioning process. This is especially useful for situations where paths to peers do not change often. This is enabled by default and can be disabled for cases where one may not want peer details to be written to storage."),Object(i.b)("p",null,"See also: ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_init_allow_net_cache()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_allow_net_cache)")),Object(i.b)("h3",{id:"function-zts_init_clear"},"function zts_init_clear"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_init_clear()\n")),Object(i.b)("p",null,"Clear all initialization settings. This is an initialization function that can only be called before ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_start()]()")," or after ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_stop()]()"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem. "),Object(i.b)("h3",{id:"function-zts_addr_is_assigned"},"function zts_addr_is_assigned"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_addr_is_assigned(\n    uint64_t net_id,\n    int family\n)\n")),Object(i.b)("p",null,"Return whether an address of the given family has been assigned by the network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"family")," ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET"),", or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET6"))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," if true, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," if false. "),Object(i.b)("h3",{id:"function-zts_addr_get"},"function zts_addr_get"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_addr_get(\n    uint64_t net_id,\n    int family,\n    struct zts_sockaddr_storage * addr\n)\n")),Object(i.b)("p",null,"Get the first-assigned IP on the given network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"family")," ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET"),", or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET6")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Destination buffer to hold address ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("p",null,"To get ",Object(i.b)("em",{parentName:"p"},"all")," assigned addresses on a given network, use ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_addr_get_all()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_addr_get_all)"),"."),Object(i.b)("h3",{id:"function-zts_addr_get_str"},"function zts_addr_get_str"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_addr_get_str(\n    uint64_t net_id,\n    int family,\n    char * dst,\n    int len\n)\n")),Object(i.b)("p",null,"Get the first-assigned IP on the given network as a null-terminated human-readable string. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"family")," ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET"),", or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET6")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dst")," Destination buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of destination buffer (must be exactly ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_IP_MAX_STR_LEN"),") ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("p",null,"To get ",Object(i.b)("em",{parentName:"p"},"all")," assigned addresses on a given network, use ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_addr_get_all()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_addr_get_all)"),"."),Object(i.b)("h3",{id:"function-zts_addr_get_all"},"function zts_addr_get_all"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_addr_get_all(\n    uint64_t net_id,\n    struct zts_sockaddr_storage * addr,\n    int * count\n)\n")),Object(i.b)("p",null,"Get all IP addresses assigned to this node by the given network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Destination buffer to hold address "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"count")," Number of addresses returned ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_addr_compute_6plane"},"function zts_addr_compute_6plane"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_addr_compute_6plane(\n    const uint64_t net_id,\n    const uint64_t node_id,\n    struct zts_sockaddr_storage * addr\n)\n")),Object(i.b)("p",null,"Compute a ",Object(i.b)("inlineCode",{parentName:"p"},"6PLANE")," IPv6 address for the given Network ID and Node ID. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"node_id")," Node ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Destination structure for address ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_addr_compute_rfc4193"},"function zts_addr_compute_rfc4193"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_addr_compute_rfc4193(\n    const uint64_t net_id,\n    const uint64_t node_id,\n    struct zts_sockaddr_storage * addr\n)\n")),Object(i.b)("p",null,"Compute ",Object(i.b)("inlineCode",{parentName:"p"},"RFC4193")," IPv6 address for the given Network ID and Node ID. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"node_id")," Node ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Destination structure for address ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_addr_compute_rfc4193_str"},"function zts_addr_compute_rfc4193_str"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_addr_compute_rfc4193_str(\n    uint64_t net_id,\n    uint64_t node_id,\n    char * dst,\n    int len\n)\n")),Object(i.b)("p",null,"Compute ",Object(i.b)("inlineCode",{parentName:"p"},"RFC4193")," IPv6 address for the given Network ID and Node ID and copy its null-terminated human-readable string representation into destination buffer. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"node_id")," Node ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dst")," Destination string buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of destination string buffer (must be exactly ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_IP_MAX_STR_LEN"),") ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_addr_compute_6plane_str"},"function zts_addr_compute_6plane_str"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_addr_compute_6plane_str(\n    uint64_t net_id,\n    uint64_t node_id,\n    char * dst,\n    int len\n)\n")),Object(i.b)("p",null,"Compute ",Object(i.b)("inlineCode",{parentName:"p"},"6PLANE")," IPv6 address for the given Network ID and Node ID and copy its null-terminated human-readable string representation into destination buffer. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"node_id")," Node ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dst")," Destination string buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of destination string buffer (must be exactly ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_IP_MAX_STR_LEN"),") ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_net_compute_adhoc_id"},"function zts_net_compute_adhoc_id"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"uint64_t zts_net_compute_adhoc_id(\n    uint16_t start_port,\n    uint16_t end_port\n)\n")),Object(i.b)("p",null,"Compute ",Object(i.b)("inlineCode",{parentName:"p"},"RFC4193")," IPv6 address for the given Network ID and Node ID. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"start_port")," Start of port allowed port range "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"end_port")," End of allowed port range ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": An Ad-hoc network ID "),Object(i.b)("p",null,"Ad-hoc Network: "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ffSSSSEEEE000000\n| |   |   |\n| |   |   Reserved for future use, must be 0\n| |   End of port range (hex)\n| Start of port range (hex)\nReserved ZeroTier address prefix indicating a controller-less network.\n")),Object(i.b)("p",null," Ad-hoc networks are public (no access control) networks that have no network controller. Instead their configuration and other credentials are generated locally. Ad-hoc networks permit only IPv6 UDP and TCP unicast traffic (no multicast or broadcast) using 6plane format NDP-emulated IPv6 addresses. In addition an ad-hoc network ID encodes an IP port range. UDP packets and TCP SYN (connection open) packets are only allowed to destination ports within the encoded range."),Object(i.b)("p",null,"For example ",Object(i.b)("inlineCode",{parentName:"p"},"ff00160016000000")," is an ad-hoc network allowing only SSH, while ",Object(i.b)("inlineCode",{parentName:"p"},"ff0000ffff000000")," is an ad-hoc network allowing any UDP or TCP port."),Object(i.b)("p",null,"Keep in mind that these networks are public and anyone in the entire world can join them. Care must be taken to avoid exposing vulnerable services or sharing unwanted files or other resources."),Object(i.b)("h3",{id:"function-zts_net_join"},"function zts_net_join"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_net_join(\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Join a network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_net_leave"},"function zts_net_leave"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_net_leave(\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Leave a network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_net_count"},"function zts_net_count"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_net_count()\n")),Object(i.b)("p",null,"Return number of joined networks. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of joined networks "),Object(i.b)("h3",{id:"function-zts_net_get_mac"},"function zts_net_get_mac"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"uint64_t zts_net_get_mac(\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Get the MAC Address for this node on the given network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": MAC address in numerical format "),Object(i.b)("h3",{id:"function-zts_net_get_mac_str"},"function zts_net_get_mac_str"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_net_get_mac_str(\n    uint64_t net_id,\n    char * dst,\n    int len\n)\n")),Object(i.b)("p",null,"Get the MAC Address for this node on the given network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dst")," Destination string buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of destination string buffer. Must be exactly ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_MAC_ADDRSTRLEN"))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": MAC address in string format "),Object(i.b)("h3",{id:"function-zts_net_get_broadcast"},"function zts_net_get_broadcast"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_net_get_broadcast(\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Return whether broadcast is enabled on this network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," if true, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," if false. "),Object(i.b)("h3",{id:"function-zts_net_get_mtu"},"function zts_net_get_mtu"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_net_get_mtu(\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Get the MTU of the given network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": MTU "),Object(i.b)("h3",{id:"function-zts_net_get_name"},"function zts_net_get_name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_net_get_name(\n    uint64_t net_id,\n    char * dst,\n    int len\n)\n")),Object(i.b)("p",null,"Get the nickname of the network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dst")," Destination string buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of destination string buffer")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_net_get_status"},"function zts_net_get_status"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_net_get_status(\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Get the status of the network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Status "),Object(i.b)("h3",{id:"function-zts_net_get_type"},"function zts_net_get_type"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_net_get_type(\n    uint64_t net_id\n)\n")),Object(i.b)("p",null,"Get the type of network (public or private.) "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Type "),Object(i.b)("h3",{id:"function-zts_route_is_assigned"},"function zts_route_is_assigned"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_route_is_assigned(\n    uint64_t net_id,\n    int family\n)\n")),Object(i.b)("p",null,"Return whether a managed route of the given address family has been assigned by the network. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"net_id")," Network ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"family")," ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET"),", or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET6"))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," if true, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," if false. "),Object(i.b)("h3",{id:"function-zts_node_start"},"function zts_node_start"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_node_start()\n")),Object(i.b)("p",null,"Start the ZeroTier node. Should be called after calling the relevant ",Object(i.b)("inlineCode",{parentName:"p"},"zts_init_*")," functions for your application. To enable storage call ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_init_from_storage()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_storage)")," before this function. To enable event callbacks call ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_init_set_event_handler()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_set_event_handler)")," before this function. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem. "),Object(i.b)("p",null,"Note: If neither ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_init_from_storage()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_storage)")," or ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_init_from_memory()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_init_from_memory)")," are called a new identity will be generated and will be retrievable via ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_node_get_id_pair()](/autogen/libzt/files/_zero_tier_sockets_8h#function-zts_node_get_id_pair)"),Object(i.b)("em",{parentName:"p"},"after")," the node has started."),Object(i.b)("h3",{id:"function-zts_node_is_online"},"function zts_node_is_online"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_node_is_online()\n")),Object(i.b)("p",null,"Return whether the node is online (Can reach the Internet) "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," if true, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," if false. "),Object(i.b)("h3",{id:"function-zts_node_get_id"},"function zts_node_get_id"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"uint64_t zts_node_get_id()\n")),Object(i.b)("p",null,"Get the public node identity (aka ",Object(i.b)("inlineCode",{parentName:"p"},"node_id"),"). Callable only after the node has been started. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Identity in numerical form "),Object(i.b)("h3",{id:"function-zts_node_get_id_pair"},"function zts_node_get_id_pair"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_node_get_id_pair(\n    char * key,\n    uint16_t * key_buf_len\n)\n")),Object(i.b)("p",null,"Copy the current node's public (and secret!) identity into a buffer. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"key")," User-provided destination buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"key_buf_len")," Length of user-provided destination buffer. Will be set to number of bytes copied. ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"WARNING"),": This function exports your secret key and should be used carefully."),Object(i.b)("h3",{id:"function-zts_node_get_port"},"function zts_node_get_port"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_node_get_port()\n")),Object(i.b)("p",null,"Get the primary port to which the node is bound. Callable only after the node has been started. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Port number "),Object(i.b)("h3",{id:"function-zts_node_stop"},"function zts_node_stop"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_node_stop()\n")),Object(i.b)("p",null,"Stop the ZeroTier node and bring down all virtual network transport services. Callable only after the node has been started. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem. "),Object(i.b)("p",null,"While the ZeroTier will stop, the stack driver (with associated timers) will remain active in case future traffic processing is required. To stop all activity and free all resources use ",Object(i.b)("inlineCode",{parentName:"p"},"zts_free()")," instead."),Object(i.b)("h3",{id:"function-zts_node_restart"},"function zts_node_restart"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_node_restart()\n")),Object(i.b)("p",null,"Restart the ZeroTier node. Callable only after the node has been started. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem. "),Object(i.b)("p",null,"This call will block until the node has been brought offline. Then it will return and the user application can then watch for the appropriate startup callback events. "),Object(i.b)("h3",{id:"function-zts_node_free"},"function zts_node_free"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_node_free()\n")),Object(i.b)("p",null,"Stop all background threads, bring down all transport services, free all resources. After calling this function an application restart will be required before the library can be used again. Callable only after the node has been started. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem. "),Object(i.b)("p",null,"This should be called at the end of your program or when you do not anticipate communicating over ZeroTier again."),Object(i.b)("h3",{id:"function-zts_moon_orbit"},"function zts_moon_orbit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_moon_orbit(\n    uint64_t moon_world_id,\n    uint64_t moon_seed\n)\n")),Object(i.b)("p",null,"Orbit a given moon (user-defined root server) "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"moon_world_id")," World ID "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"moon_seed")," Seed ID ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_moon_deorbit"},"function zts_moon_deorbit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_moon_deorbit(\n    uint64_t moon_world_id\n)\n")),Object(i.b)("p",null,"De-orbit a given moon (user-defined root server) "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"moon_world_id")," World ID ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. "),Object(i.b)("h3",{id:"function-zts_stats_get_all"},"function zts_stats_get_all"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_stats_get_all(\n    zts_stats_counter_t * dst\n)\n")),Object(i.b)("p",null,"Get all statistical counters for all protocols and levels, where ",Object(i.b)("em",{parentName:"p"},"all")," means ",Object(i.b)("em",{parentName:"p"},"most"),". If you need anything more detailed you should inspect what is available in ",Object(i.b)("inlineCode",{parentName:"p"},"lwip/stats.h"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dst")," Pointer to structure that will be populated with statistics")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ZTS_ERR_OK on success. ZTS_ERR_ARG or ZTS_ERR_NO_RESULT on failure. "),Object(i.b)("p",null,"This function can only be used in debug builds."),Object(i.b)("h3",{id:"function-zts_socket"},"function zts_socket"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_socket(\n    int family,\n    int type,\n    int protocol\n)\n")),Object(i.b)("p",null,"Create a socket. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"family")," ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET")," or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET6")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"type")," ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_SOCK_STREAM")," or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_SOCK_DGRAM")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"protocol")," Protocols supported on this socket ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Numbered file descriptor on success, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_connect"},"function zts_connect"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_connect(\n    int fd,\n    const struct zts_sockaddr * addr,\n    zts_socklen_t addrlen\n)\n")),Object(i.b)("p",null,"Connect a socket to a remote host. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Remote host address to connect to "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addrlen")," Length of address ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_connect"},"function zts_simple_connect"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_connect(\n    int fd,\n    const char * ipstr,\n    int port,\n    int timeout_ms\n)\n")),Object(i.b)("p",null,"Connect a socket to a remote host. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"ipstr")," Human-readable IP string "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"port")," Port "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"timeout_ms")," (Approximate) amount of time in milliseconds before connection attempt is aborted. Will block for ",Object(i.b)("inlineCode",{parentName:"li"},"30 seconds")," if timeout is set to ",Object(i.b)("inlineCode",{parentName:"li"},"0"),".")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SOCKET")," if the function times out with no connection made, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("p",null,"This convenience function exists because ZeroTier uses transport-triggered links. This means that links between peers do not exist until peers try to talk to each other. This can be a problem during connection procedures since some of the initial packets are lost. To alleviate the need to try ",Object(i.b)("inlineCode",{parentName:"p"},"zts_connect")," many times, this function will keep re-trying for you, even if no known routes exist. However, if the socket is set to ",Object(i.b)("inlineCode",{parentName:"p"},"non-blocking")," mode it will behave identically to ",Object(i.b)("inlineCode",{parentName:"p"},"zts_connect")," and return immediately upon failure."),Object(i.b)("h3",{id:"function-zts_bind"},"function zts_bind"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_bind(\n    int fd,\n    const struct zts_sockaddr * addr,\n    zts_socklen_t addrlen\n)\n")),Object(i.b)("p",null,"Bind a socket to a local address. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Local interface address to bind to "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addrlen")," Length of address ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_bind"},"function zts_simple_bind"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_bind(\n    int fd,\n    const char * ipstr,\n    int port\n)\n")),Object(i.b)("p",null,"Bind a socket to a local address. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"ipstr")," Human-readable IP string "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"port")," Port ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_listen"},"function zts_listen"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_listen(\n    int fd,\n    int backlog\n)\n")),Object(i.b)("p",null,"Listen for incoming connections on socket. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"backlog")," Number of backlogged connections allowed ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_accept"},"function zts_accept"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_accept(\n    int fd,\n    struct zts_sockaddr * addr,\n    zts_socklen_t * addrlen\n)\n")),Object(i.b)("p",null,"Accept an incoming connection. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Address of remote host for accepted connection "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addrlen")," Length of address ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": New file descriptor if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_accept"},"function zts_simple_accept"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_accept(\n    int fd,\n    char * remote_addr,\n    int len,\n    int * port\n)\n")),Object(i.b)("p",null,"Accept an incoming connection. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"remote_addr")," Buffer that will receive remote host IP string "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Size of buffer that will receive remote host IP string (must be exactly ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_IP_MAX_STR_LEN"),") "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"port")," Port number of the newly connected remote host (value-result) ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": New file descriptor if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_tcp_client"},"function zts_simple_tcp_client"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_tcp_client(\n    const char * remote_ipstr,\n    int remote_port\n)\n")),Object(i.b)("p",null,"A convenience function that takes a remote address IP string and creates the appropriate type of socket, and uses it to connect to a remote host. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"remote_ipstr")," Remote address string. IPv4 or IPv6 "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"remote_port")," Port to")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": New file descriptor if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_tcp_server"},"function zts_simple_tcp_server"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_tcp_server(\n    const char * local_ipstr,\n    int local_port,\n    char * remote_ipstr,\n    int len,\n    int * remote_port\n)\n")),Object(i.b)("p",null,"A convenience function that takes a remote address IP string and creates the appropriate type of socket, binds, listens, and then accepts on it. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"local_ipstr")," Local address to bind "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"local_port")," Local port to bind "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"remote_ipstr")," String-format IP address of newly connected remote host "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of ",Object(i.b)("inlineCode",{parentName:"li"},"remote_ipstr")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"remote_port")," Port of remote host")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": New file descriptor if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_udp_server"},"function zts_simple_udp_server"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_udp_server(\n    const char * local_ipstr,\n    int local_port\n)\n")),Object(i.b)("p",null,"A convenience function that takes a remote address IP string and creates the appropriate type of socket, and binds to it. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"local_ipstr")," Local address to bind "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"local_port")," Local port to bind")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": New file descriptor if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_udp_client"},"function zts_simple_udp_client"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_udp_client(\n    const char * remote_ipstr\n)\n")),Object(i.b)("p",null,"This function doesn't really do anything other than be a namespace counterpart to ",Object(i.b)("inlineCode",{parentName:"p"},"zts_simple_udp_server"),". All this function does is create a ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_SOCK_DGRAM")," socket and return its file descriptor. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"remote_ipstr")," Remote address string. IPv4 or IPv6")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": New file descriptor if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_setsockopt"},"function zts_setsockopt"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_setsockopt(\n    int fd,\n    int level,\n    int optname,\n    const void * optval,\n    zts_socklen_t optlen\n)\n")),Object(i.b)("p",null,"Set socket options. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"level")," Protocol level to which option name should apply "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"optname")," Option name to set "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"optval")," Source of option value to set "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"optlen")," Length of option value ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_getsockopt"},"function zts_getsockopt"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_getsockopt(\n    int fd,\n    int level,\n    int optname,\n    void * optval,\n    zts_socklen_t * optlen\n)\n")),Object(i.b)("p",null,"Get socket options. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"level")," Protocol level to which option name should apply "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"optname")," Option name to get "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"optval")," Where option value will be stored "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"optlen")," Length of value ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_getsockname"},"function zts_getsockname"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_getsockname(\n    int fd,\n    struct zts_sockaddr * addr,\n    zts_socklen_t * addrlen\n)\n")),Object(i.b)("p",null,"Get socket name. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Name associated with this socket "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addrlen")," Length of name ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_getpeername"},"function zts_getpeername"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_getpeername(\n    int fd,\n    struct zts_sockaddr * addr,\n    zts_socklen_t * addrlen\n)\n")),Object(i.b)("p",null,"Get the peer name for the remote end of a connected socket. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Name associated with remote end of this socket "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addrlen")," Length of name ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_close"},"function zts_close"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_close(\n    int fd\n)\n")),Object(i.b)("p",null,"Close socket. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_select"},"function zts_select"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_select(\n    int nfds,\n    zts_fd_set * readfds,\n    zts_fd_set * writefds,\n    zts_fd_set * exceptfds,\n    struct zts_timeval * timeout\n)\n")),Object(i.b)("p",null,'Monitor multiple file descriptors for "readiness". '),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"nfds")," Set to the highest numbered file descriptor in any of the given sets "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"readfds")," Set of file descriptors to monitor for READ readiness "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"writefds")," Set of file descriptors to monitor for WRITE readiness "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"exceptfds")," Set of file descriptors to monitor for exceptional conditions "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"timeout")," How long this call should block ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of ready file descriptors on success. ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SOCKET"),", ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," on failure. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_fcntl"},"function zts_fcntl"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_fcntl(\n    int fd,\n    int cmd,\n    int flags\n)\n")),Object(i.b)("p",null,"Issue file control commands on a socket. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"cmd")," Operation to be performed "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"flags")," Flags ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": "),Object(i.b)("h3",{id:"function-zts_poll"},"function zts_poll"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_poll(\n    struct zts_pollfd * fds,\n    zts_nfds_t nfds,\n    int timeout\n)\n")),Object(i.b)("p",null,"Wait for some event on a file descriptor. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fds")," Set of file descriptors to monitor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"nfds")," Number of elements in the fds array "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"timeout")," How long this call should block ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of ready file descriptors if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_ioctl"},"function zts_ioctl"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_ioctl(\n    int fd,\n    unsigned long request,\n    void * argp\n)\n")),Object(i.b)("p",null,"Control a device. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"request")," Selects the control function to be performed "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"argp")," Additional information ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_send"},"function zts_send"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ssize_t zts_send(\n    int fd,\n    const void * buf,\n    size_t len,\n    int flags\n)\n")),Object(i.b)("p",null,"Send data to remote host. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"buf")," Pointer to data buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of data to write "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"flags")," (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_MSG_DONTWAIT"),", ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_MSG_MORE"),") ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of bytes sent if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_sendto"},"function zts_sendto"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ssize_t zts_sendto(\n    int fd,\n    const void * buf,\n    size_t len,\n    int flags,\n    const struct zts_sockaddr * addr,\n    zts_socklen_t addrlen\n)\n")),Object(i.b)("p",null,"Send data to remote host. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"buf")," Pointer to data buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of data to write "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"flags")," Specifies type of message transmission "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Destination address "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addrlen")," Length of destination address ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of bytes sent if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_sendmsg"},"function zts_sendmsg"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ssize_t zts_sendmsg(\n    int fd,\n    const struct zts_msghdr * msg,\n    int flags\n)\n")),Object(i.b)("p",null,"Send message to remote host. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"msg")," Message to send "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"flags")," Specifies type of message transmission ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of bytes sent if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_recv"},"function zts_recv"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ssize_t zts_recv(\n    int fd,\n    void * buf,\n    size_t len,\n    int flags\n)\n")),Object(i.b)("p",null,"Receive data from remote host. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"buf")," Pointer to data buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of data buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"flags")," Specifies the type of message receipt ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of bytes received if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_recvfrom"},"function zts_recvfrom"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ssize_t zts_recvfrom(\n    int fd,\n    void * buf,\n    size_t len,\n    int flags,\n    struct zts_sockaddr * addr,\n    zts_socklen_t * addrlen\n)\n")),Object(i.b)("p",null,"Receive data from remote host. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"buf")," Pointer to data buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of data buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"flags")," Specifies the type of message receipt "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," Destination address buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addrlen")," Length of destination address buffer ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of bytes received if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_recvmsg"},"function zts_recvmsg"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ssize_t zts_recvmsg(\n    int fd,\n    struct zts_msghdr * msg,\n    int flags\n)\n")),Object(i.b)("p",null,"Receive a message from remote host. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"msg")," Message that was received "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"flags")," Specifies the type of message receipt ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of bytes received if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_read"},"function zts_read"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ssize_t zts_read(\n    int fd,\n    void * buf,\n    size_t len\n)\n")),Object(i.b)("p",null,"Read data from socket onto buffer. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"buf")," Pointer to data buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of data buffer to receive data ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of bytes read if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_readv"},"function zts_readv"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ssize_t zts_readv(\n    int fd,\n    const struct zts_iovec * iov,\n    int iovcnt\n)\n")),Object(i.b)("p",null,"Read data from socket into multiple buffers. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"iov")," Array of destination buffers "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"iovcnt")," Number of buffers to read into ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of bytes read if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_write"},"function zts_write"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ssize_t zts_write(\n    int fd,\n    const void * buf,\n    size_t len\n)\n")),Object(i.b)("p",null,"Write data from buffer to socket. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"buf")," Pointer to data buffer "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"len")," Length of buffer to write ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of bytes written if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_writev"},"function zts_writev"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"ssize_t zts_writev(\n    int fd,\n    const struct zts_iovec * iov,\n    int iovcnt\n)\n")),Object(i.b)("p",null,"Write data from multiple buffers to socket. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"iov")," Array of source buffers "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"iovcnt")," Number of buffers to read from ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Number of bytes written if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_shutdown"},"function zts_shutdown"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_shutdown(\n    int fd,\n    int how\n)\n")),Object(i.b)("p",null,"Shut down some aspect of a socket. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"how")," Which aspects of the socket should be shut down. Options are ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_SHUT_RD"),", ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_SHUT_WR"),", or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_SHUT_RDWR"),". ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_set_no_delay"},"function zts_simple_set_no_delay"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_set_no_delay(\n    int fd,\n    int enabled\n)\n")),Object(i.b)("p",null,"Enable or disable ",Object(i.b)("inlineCode",{parentName:"p"},"TCP_NODELAY"),". Enabling this is equivalent to turning off Nagle's algorithm. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"enabled")," ",Object(i.b)("inlineCode",{parentName:"li"},"[0, 1]")," integer value ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_no_delay"},"function zts_simple_get_no_delay"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_no_delay(\n    int fd\n)\n")),Object(i.b)("p",null,"Return whether ",Object(i.b)("inlineCode",{parentName:"p"},"TCP_NODELAY")," is enabled. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," if enabled, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," if disabled, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_set_linger"},"function zts_simple_set_linger"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_set_linger(\n    int fd,\n    int enabled,\n    int value\n)\n")),Object(i.b)("p",null,"Enable or disable ",Object(i.b)("inlineCode",{parentName:"p"},"SO_LINGER")," while also setting its value. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"enabled")," ",Object(i.b)("inlineCode",{parentName:"li"},"[0, 1]")," integer value "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"value")," How long socket should linger ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_linger_enabled"},"function zts_simple_get_linger_enabled"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_linger_enabled(\n    int fd\n)\n")),Object(i.b)("p",null,"Return whether ",Object(i.b)("inlineCode",{parentName:"p"},"SO_LINGER")," is enabled. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," if enabled, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," if disabled, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_linger_value"},"function zts_simple_get_linger_value"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_linger_value(\n    int fd\n)\n")),Object(i.b)("p",null,"Return the value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_LINGER")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_LINGER")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_set_reuse_addr"},"function zts_simple_set_reuse_addr"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_set_reuse_addr(\n    int fd,\n    int enabled\n)\n")),Object(i.b)("p",null,"Enable or disable ",Object(i.b)("inlineCode",{parentName:"p"},"SO_REUSEADDR")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"enabled")," ",Object(i.b)("inlineCode",{parentName:"li"},"[0, 1]")," integer value ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_reuse_addr"},"function zts_simple_get_reuse_addr"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_reuse_addr(\n    int fd\n)\n")),Object(i.b)("p",null,"Return whether ",Object(i.b)("inlineCode",{parentName:"p"},"SO_REUSEADDR")," is enabled. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," if enabled, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," if disabled, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_set_recv_timeout"},"function zts_simple_set_recv_timeout"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_set_recv_timeout(\n    int fd,\n    int seconds,\n    int microseconds\n)\n")),Object(i.b)("p",null,"Set the value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_RCVTIMEO")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"seconds")," Number of seconds for timeout "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"microseconds")," Number of microseconds for timeout ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_recv_timeout"},"function zts_simple_get_recv_timeout"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_recv_timeout(\n    int fd\n)\n")),Object(i.b)("p",null,"Return the value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_RCVTIMEO")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_RCVTIMEO")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_set_send_timeout"},"function zts_simple_set_send_timeout"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_set_send_timeout(\n    int fd,\n    int seconds,\n    int microseconds\n)\n")),Object(i.b)("p",null,"Set the value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_SNDTIMEO")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"seconds")," Number of seconds for timeout "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"microseconds")," Number of microseconds for timeout ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_send_timeout"},"function zts_simple_get_send_timeout"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_send_timeout(\n    int fd\n)\n")),Object(i.b)("p",null,"Return the value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_SNDTIMEO")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_SNDTIMEO")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_set_send_buf_size"},"function zts_simple_set_send_buf_size"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_set_send_buf_size(\n    int fd,\n    int size\n)\n")),Object(i.b)("p",null,"Set the value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_SNDBUF")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"size")," Size of buffer ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_send_buf_size"},"function zts_simple_get_send_buf_size"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_send_buf_size(\n    int fd\n)\n")),Object(i.b)("p",null,"Return the value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_SNDBUF")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_SNDBUF")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_set_recv_buf_size"},"function zts_simple_set_recv_buf_size"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_set_recv_buf_size(\n    int fd,\n    int size\n)\n")),Object(i.b)("p",null,"Set the value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_RCVBUF")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"size")," Size of buffer ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_recv_buf_size"},"function zts_simple_get_recv_buf_size"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_recv_buf_size(\n    int fd\n)\n")),Object(i.b)("p",null,"Return the value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_RCVBUF")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Value of ",Object(i.b)("inlineCode",{parentName:"p"},"SO_RCVBUF")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_set_ttl"},"function zts_simple_set_ttl"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_set_ttl(\n    int fd,\n    int ttl\n)\n")),Object(i.b)("p",null,"Set the value of ",Object(i.b)("inlineCode",{parentName:"p"},"IP_TTL")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"ttl")," Value of ",Object(i.b)("inlineCode",{parentName:"li"},"IP_TTL"))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_ttl"},"function zts_simple_get_ttl"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_ttl(\n    int fd\n)\n")),Object(i.b)("p",null,"Return the value of ",Object(i.b)("inlineCode",{parentName:"p"},"IP_TTL")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Value of ",Object(i.b)("inlineCode",{parentName:"p"},"IP_TTL``[0,255]")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_set_blocking"},"function zts_simple_set_blocking"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_set_blocking(\n    int fd,\n    int enabled\n)\n")),Object(i.b)("p",null,"Change blocking behavior ",Object(i.b)("inlineCode",{parentName:"p"},"O_NONBLOCK")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"enabled")," ",Object(i.b)("inlineCode",{parentName:"li"},"[0, 1]")," integer value, ",Object(i.b)("inlineCode",{parentName:"li"},"1")," maintains default behavior, ",Object(i.b)("inlineCode",{parentName:"li"},"0")," sets to non-blocking mode ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_blocking"},"function zts_simple_get_blocking"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_blocking(\n    int fd\n)\n")),Object(i.b)("p",null,"Return whether blocking mode ",Object(i.b)("inlineCode",{parentName:"p"},"O_NONBLOCK")," is enabled. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," if enabled, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," if disabled, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_set_keepalive"},"function zts_simple_set_keepalive"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_set_keepalive(\n    int fd,\n    int enabled\n)\n")),Object(i.b)("p",null,"Enable or disable ",Object(i.b)("inlineCode",{parentName:"p"},"SO_KEEPALIVE")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"enabled")," ",Object(i.b)("inlineCode",{parentName:"li"},"[0, 1]")," integer value ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," if successful, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_simple_get_keepalive"},"function zts_simple_get_keepalive"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_simple_get_keepalive(\n    int fd\n)\n")),Object(i.b)("p",null,"Return whether ",Object(i.b)("inlineCode",{parentName:"p"},"SO_KEEPALIVE")," is enabled. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fd")," Socket file descriptor ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," if enabled, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," if disabled, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_SERVICE")," if the node experiences a problem, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument. Sets ",Object(i.b)("inlineCode",{parentName:"p"},"zts_errno")),Object(i.b)("h3",{id:"function-zts_gethostbyname"},"function zts_gethostbyname"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"struct zts_hostent * zts_gethostbyname(\n    const char * name\n)\n")),Object(i.b)("p",null,"Resolve a host-name. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"name")," A null-terminated string representing the name of the host ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Pointer to struct zts_hostent if successful, NULL otherwise "),Object(i.b)("h3",{id:"function-zts_dns_set_server"},"function zts_dns_set_server"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_dns_set_server(\n    uint8_t index,\n    const zts_ip_addr * addr\n)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"index")," the index of the DNS server to set must be ",Object(i.b)("inlineCode",{parentName:"li"},"< DNS_MAX_SERVERS")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," IP address of the DNS server to set ")),Object(i.b)("p",null,"Initialize one of the DNS servers."),Object(i.b)("h3",{id:"function-zts_dns_get_server"},"function zts_dns_get_server"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"const zts_ip_addr * zts_dns_get_server(\n    uint8_t index\n)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"index")," the index of the DNS server ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": IP address of the indexed DNS server or ",Object(i.b)("inlineCode",{parentName:"p"},"ip_addr_any")," if the DNS server has not been configured. "),Object(i.b)("p",null,"Obtain one of the currently configured DNS server."),Object(i.b)("h3",{id:"function-zts_ipaddr_ntoa"},"function zts_ipaddr_ntoa"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"char * zts_ipaddr_ntoa(\n    const zts_ip_addr * addr\n)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," IP address in network order to convert ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Pointer to a global static (!) buffer that holds the ",Object(i.b)("inlineCode",{parentName:"p"},"ASCII")," representation of addr "),Object(i.b)("p",null,"Convert numeric IP address (both versions) into ",Object(i.b)("inlineCode",{parentName:"p"},"ASCII")," representation. returns ptr to static buffer. Not reentrant."),Object(i.b)("h3",{id:"function-zts_ipaddr_aton"},"function zts_ipaddr_aton"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_ipaddr_aton(\n    const char * cp,\n    zts_ip_addr * addr\n)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"cp")," IP address string to convert "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addr")," conversion result is stored here ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": ",Object(i.b)("inlineCode",{parentName:"p"},"1")," on success, ",Object(i.b)("inlineCode",{parentName:"p"},"0")," on error "),Object(i.b)("p",null,"Convert IP address string (both versions) to numeric. The version is auto-detected from the string."),Object(i.b)("h3",{id:"function-zts_inet_ntop"},"function zts_inet_ntop"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"const char * zts_inet_ntop(\n    int family,\n    const void * src,\n    char * dst,\n    zts_socklen_t size\n)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"family")," Address family: ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET")," or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET6")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"src")," Pointer to source address structure "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dst")," Pointer to destination character array "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"size")," Size of the destination buffer ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": On success, returns a non-null pointer to the destination character array "),Object(i.b)("p",null,"Convert IPv4 and IPv6 address structures to human-readable text form."),Object(i.b)("h3",{id:"function-zts_inet_pton"},"function zts_inet_pton"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_inet_pton(\n    int family,\n    const char * src,\n    void * dst\n)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"family")," Address family: ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET")," or ",Object(i.b)("inlineCode",{parentName:"li"},"ZTS_AF_INET6")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"src")," Pointer to source character array "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dst")," Pointer to destination address structure ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": return ",Object(i.b)("inlineCode",{parentName:"p"},"1")," on success. ",Object(i.b)("inlineCode",{parentName:"p"},"0")," or ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," on failure. (Does not follow regular ",Object(i.b)("inlineCode",{parentName:"p"},"zts_*")," conventions) "),Object(i.b)("p",null,"Convert C-string IPv4 and IPv6 addresses to binary form."),Object(i.b)("h3",{id:"function-zts_util_delay"},"function zts_util_delay"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"void zts_util_delay(\n    long interval_ms\n)\n")),Object(i.b)("p",null,"Platform-agnostic delay (provided for convenience) "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"interval_ms")," Number of milliseconds to delay ")),Object(i.b)("h3",{id:"function-zts_util_get_ip_family"},"function zts_util_get_ip_family"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_util_get_ip_family(\n    const char * ipstr\n)\n")),Object(i.b)("p",null,"Return the family type of the IP string. "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"ipstr")," Either IPv4 or IPv6 string ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": Either ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_AF_INET")," or ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_AF_INET6")),Object(i.b)("h3",{id:"function-zts_util_ipstr_to_saddr"},"function zts_util_ipstr_to_saddr"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_util_ipstr_to_saddr(\n    const char * src_ipstr,\n    int port,\n    struct zts_sockaddr * dstaddr,\n    zts_socklen_t * addrlen\n)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters"),": "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"src_ipstr")," Source IP string "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"port")," Port "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dstaddr")," Pointer to destination structure ",Object(i.b)("inlineCode",{parentName:"li"},"[zts_sockaddr_in](/autogen/libzt/classes/structzts__sockaddr__in)")," or ",Object(i.b)("inlineCode",{parentName:"li"},"[zts_sockaddr_in6](/autogen/libzt/classes/structzts__sockaddr__in6)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"addrlen")," Size of destination structure. Value-result: Will be set to actual size of data available ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Return"),": return ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_OK")," on success, ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_ERR_ARG")," if invalid argument "),Object(i.b)("p",null,"Convert human-friendly IP string to ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_sockaddr_in](/autogen/libzt/classes/structzts__sockaddr__in)")," or ",Object(i.b)("inlineCode",{parentName:"p"},"[zts_sockaddr_in6](/autogen/libzt/classes/structzts__sockaddr__in6)"),"."),Object(i.b)("h2",{id:"attributes-documentation"},"Attributes Documentation"),Object(i.b)("h3",{id:"variable-zts_errno"},"variable zts_errno"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int zts_errno;\n")),Object(i.b)("p",null,"Error variable set after each ",Object(i.b)("inlineCode",{parentName:"p"},"zts_*")," socket call. Provides additional error context. "),Object(i.b)("h2",{id:"macro-documentation"},"Macro Documentation"),Object(i.b)("h3",{id:"define-zts_mac_addrstrlen"},"define ZTS_MAC_ADDRSTRLEN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MAC_ADDRSTRLEN 18\n")),Object(i.b)("p",null,"Length of human-readable MAC address string "),Object(i.b)("h3",{id:"define-zts_inet_addrstrlen"},"define ZTS_INET_ADDRSTRLEN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_INET_ADDRSTRLEN 16\n")),Object(i.b)("p",null,"Max length of human-readable IPv4 string "),Object(i.b)("h3",{id:"define-zts_inet6_addrstrlen"},"define ZTS_INET6_ADDRSTRLEN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_INET6_ADDRSTRLEN 46\n")),Object(i.b)("p",null,"Max length of human-readable IPv6 string "),Object(i.b)("h3",{id:"define-zts_ip_max_str_len"},"define ZTS_IP_MAX_STR_LEN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IP_MAX_STR_LEN [ZTS_INET6_ADDRSTRLEN](/autogen/libzt/files/_zero_tier_sockets_8h.md#define-zts_inet6_addrstrlen)\n")),Object(i.b)("p",null,"Maximum (and required) length of string buffers used to receive string-format IP addresses from the API. This is set to ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_INET6_ADDRSTRLEN")," to handle all cases: ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_AF_INET")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ZTS_AF_INET6")),Object(i.b)("h3",{id:"define-zts_store_data_len"},"define ZTS_STORE_DATA_LEN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_STORE_DATA_LEN 4096\n")),Object(i.b)("p",null,"Required buffer length to safely receive data store items "),Object(i.b)("h3",{id:"define-zts_max_network_short_name_length"},"define ZTS_MAX_NETWORK_SHORT_NAME_LENGTH"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MAX_NETWORK_SHORT_NAME_LENGTH 127\n")),Object(i.b)("p",null,"Maximum length of network short name "),Object(i.b)("h3",{id:"define-zts_max_network_routes"},"define ZTS_MAX_NETWORK_ROUTES"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MAX_NETWORK_ROUTES 32\n")),Object(i.b)("p",null,"Maximum number of pushed routes on a network "),Object(i.b)("h3",{id:"define-zts_max_assigned_addresses"},"define ZTS_MAX_ASSIGNED_ADDRESSES"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MAX_ASSIGNED_ADDRESSES 16\n")),Object(i.b)("p",null,"Maximum number of statically assigned IP addresses per network endpoint using ZT address management (not DHCP) "),Object(i.b)("h3",{id:"define-zts_max_peer_network_paths"},"define ZTS_MAX_PEER_NETWORK_PATHS"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MAX_PEER_NETWORK_PATHS 16\n")),Object(i.b)("p",null,"Maximum number of direct network paths to a given peer "),Object(i.b)("h3",{id:"define-zts_max_multicast_subscriptions"},"define ZTS_MAX_MULTICAST_SUBSCRIPTIONS"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MAX_MULTICAST_SUBSCRIPTIONS 1024\n")),Object(i.b)("p",null,"Maximum number of multicast groups a device / network interface can be subscribed to at once "),Object(i.b)("h3",{id:"define-zts_c_api_only"},"define ZTS_C_API_ONLY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_C_API_ONLY 1\n")),Object(i.b)("h3",{id:"define-zts_ipaddr_none"},"define ZTS_IPADDR_NONE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPADDR_NONE ((uint32_t)0xffffffffUL)\n")),Object(i.b)("p",null,"255.255.255.255 "),Object(i.b)("h3",{id:"define-zts_ipaddr_loopback"},"define ZTS_IPADDR_LOOPBACK"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPADDR_LOOPBACK ((uint32_t)0x7f000001UL)\n")),Object(i.b)("p",null,"127.0.0.1 "),Object(i.b)("h3",{id:"define-zts_ipaddr_any"},"define ZTS_IPADDR_ANY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPADDR_ANY ((uint32_t)0x00000000UL)\n")),Object(i.b)("p",null,"0.0.0.0 "),Object(i.b)("h3",{id:"define-zts_ipaddr_broadcast"},"define ZTS_IPADDR_BROADCAST"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPADDR_BROADCAST ((uint32_t)0xffffffffUL)\n")),Object(i.b)("p",null,"255.255.255.255 "),Object(i.b)("h3",{id:"define-zts_inaddr_none"},"define ZTS_INADDR_NONE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_INADDR_NONE [ZTS_IPADDR_NONE](/autogen/libzt/files/_zero_tier_sockets_8h.md#define-zts_ipaddr_none)\n")),Object(i.b)("p",null,"255.255.255.255 "),Object(i.b)("h3",{id:"define-zts_inaddr_loopback"},"define ZTS_INADDR_LOOPBACK"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_INADDR_LOOPBACK [ZTS_IPADDR_LOOPBACK](/autogen/libzt/files/_zero_tier_sockets_8h.md#define-zts_ipaddr_loopback)\n")),Object(i.b)("p",null,"127.0.0.1 "),Object(i.b)("h3",{id:"define-zts_inaddr_any"},"define ZTS_INADDR_ANY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_INADDR_ANY [ZTS_IPADDR_ANY](/autogen/libzt/files/_zero_tier_sockets_8h.md#define-zts_ipaddr_any)\n")),Object(i.b)("p",null,"0.0.0.0 "),Object(i.b)("h3",{id:"define-zts_inaddr_broadcast"},"define ZTS_INADDR_BROADCAST"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_INADDR_BROADCAST [ZTS_IPADDR_BROADCAST](/autogen/libzt/files/_zero_tier_sockets_8h.md#define-zts_ipaddr_broadcast)\n")),Object(i.b)("p",null,"255.255.255.255 "),Object(i.b)("h3",{id:"define-zts_sock_stream"},"define ZTS_SOCK_STREAM"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SOCK_STREAM 0x0001\n")),Object(i.b)("h3",{id:"define-zts_sock_dgram"},"define ZTS_SOCK_DGRAM"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SOCK_DGRAM 0x0002\n")),Object(i.b)("h3",{id:"define-zts_sock_raw"},"define ZTS_SOCK_RAW"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SOCK_RAW 0x0003\n")),Object(i.b)("h3",{id:"define-zts_af_unspec"},"define ZTS_AF_UNSPEC"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_AF_UNSPEC 0x0000\n")),Object(i.b)("h3",{id:"define-zts_af_inet"},"define ZTS_AF_INET"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_AF_INET 0x0002\n")),Object(i.b)("h3",{id:"define-zts_af_inet6"},"define ZTS_AF_INET6"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_AF_INET6 0x000a\n")),Object(i.b)("h3",{id:"define-zts_pf_inet"},"define ZTS_PF_INET"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_PF_INET ZTS_AF_INET\n")),Object(i.b)("h3",{id:"define-zts_pf_inet6"},"define ZTS_PF_INET6"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_PF_INET6 ZTS_AF_INET6\n")),Object(i.b)("h3",{id:"define-zts_pf_unspec"},"define ZTS_PF_UNSPEC"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_PF_UNSPEC ZTS_AF_UNSPEC\n")),Object(i.b)("h3",{id:"define-zts_ipproto_ip"},"define ZTS_IPPROTO_IP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPPROTO_IP 0x0000\n")),Object(i.b)("h3",{id:"define-zts_ipproto_icmp"},"define ZTS_IPPROTO_ICMP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPPROTO_ICMP 0x0001\n")),Object(i.b)("h3",{id:"define-zts_ipproto_tcp"},"define ZTS_IPPROTO_TCP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPPROTO_TCP 0x0006\n")),Object(i.b)("h3",{id:"define-zts_ipproto_udp"},"define ZTS_IPPROTO_UDP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPPROTO_UDP 0x0011\n")),Object(i.b)("h3",{id:"define-zts_ipproto_ipv6"},"define ZTS_IPPROTO_IPV6"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPPROTO_IPV6 0x0029\n")),Object(i.b)("h3",{id:"define-zts_ipproto_icmpv6"},"define ZTS_IPPROTO_ICMPV6"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPPROTO_ICMPV6 0x003a\n")),Object(i.b)("h3",{id:"define-zts_ipproto_udplite"},"define ZTS_IPPROTO_UDPLITE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPPROTO_UDPLITE 0x0088\n")),Object(i.b)("h3",{id:"define-zts_ipproto_raw"},"define ZTS_IPPROTO_RAW"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPPROTO_RAW 0x00ff\n")),Object(i.b)("h3",{id:"define-zts_msg_peek"},"define ZTS_MSG_PEEK"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MSG_PEEK 0x0001\n")),Object(i.b)("h3",{id:"define-zts_msg_waitall"},"define ZTS_MSG_WAITALL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MSG_WAITALL 0x0002\n")),Object(i.b)("h3",{id:"define-zts_msg_oob"},"define ZTS_MSG_OOB"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MSG_OOB 0x0004\n")),Object(i.b)("h3",{id:"define-zts_msg_dontwait"},"define ZTS_MSG_DONTWAIT"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MSG_DONTWAIT 0x0008\n")),Object(i.b)("h3",{id:"define-zts_msg_more"},"define ZTS_MSG_MORE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MSG_MORE 0x0010\n")),Object(i.b)("h3",{id:"define-zts_iocparm_mask"},"define ZTS_IOCPARM_MASK"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IOCPARM_MASK 0x7fU\n")),Object(i.b)("h3",{id:"define-zts_ioc_void"},"define ZTS_IOC_VOID"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IOC_VOID 0x20000000UL\n")),Object(i.b)("h3",{id:"define-zts_ioc_out"},"define ZTS_IOC_OUT"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IOC_OUT 0x40000000UL\n")),Object(i.b)("h3",{id:"define-zts_ioc_in"},"define ZTS_IOC_IN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IOC_IN 0x80000000UL\n")),Object(i.b)("h3",{id:"define-zts_ioc_inout"},"define ZTS_IOC_INOUT"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IOC_INOUT (ZTS_IOC_IN | ZTS_IOC_OUT)\n")),Object(i.b)("h3",{id:"define-zts_io"},"define ZTS_IO"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IO(\n    x,\n    y\n)\n(ZTS_IOC_VOID | ((x) << 8) | (y))\n")),Object(i.b)("h3",{id:"define-zts_ior"},"define ZTS_IOR"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IOR(\n    x,\n    y,\n    t\n)\n    (ZTS_IOC_OUT | (((long)sizeof(t) & ZTS_IOCPARM_MASK) << 16) | ((x) << 8) | (y))\n")),Object(i.b)("h3",{id:"define-zts_iow"},"define ZTS_IOW"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IOW(\n    x,\n    y,\n    t\n)\n    (ZTS_IOC_IN | (((long)sizeof(t) & ZTS_IOCPARM_MASK) << 16) | ((x) << 8) | (y))\n")),Object(i.b)("h3",{id:"define-zts_fionread"},"define ZTS_FIONREAD"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_FIONREAD ZTS_IOR('f', 127, unsigned long)\n")),Object(i.b)("h3",{id:"define-zts_fionbio"},"define ZTS_FIONBIO"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_FIONBIO ZTS_IOW('f', 126, unsigned long)\n")),Object(i.b)("h3",{id:"define-sin_zero_len"},"define SIN_ZERO_LEN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define SIN_ZERO_LEN 8\n")),Object(i.b)("h3",{id:"define-zts_api"},"define ZTS_API"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_API \n")),Object(i.b)("h3",{id:"define-ztcall"},"define ZTCALL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTCALL \n")),Object(i.b)("h3",{id:"define-zts_central_default_url"},"define ZTS_CENTRAL_DEFAULT_URL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'#define ZTS_CENTRAL_DEFAULT_URL "https://my.zerotier.com"\n')),Object(i.b)("h3",{id:"define-zts_cenrtal_max_url_len"},"define ZTS_CENRTAL_MAX_URL_LEN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_CENRTAL_MAX_URL_LEN 128\n")),Object(i.b)("h3",{id:"define-zts_central_token_len"},"define ZTS_CENTRAL_TOKEN_LEN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_CENTRAL_TOKEN_LEN 32\n")),Object(i.b)("h3",{id:"define-zts_central_resp_buf_default_sz"},"define ZTS_CENTRAL_RESP_BUF_DEFAULT_SZ"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_CENTRAL_RESP_BUF_DEFAULT_SZ (128 * 1024)\n")),Object(i.b)("h3",{id:"define-zts_http_get"},"define ZTS_HTTP_GET"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_HTTP_GET 0\n")),Object(i.b)("h3",{id:"define-zts_http_post"},"define ZTS_HTTP_POST"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_HTTP_POST 1\n")),Object(i.b)("h3",{id:"define-zts_http_delete"},"define ZTS_HTTP_DELETE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_HTTP_DELETE 2\n")),Object(i.b)("h3",{id:"define-zts_central_node_auth_false"},"define ZTS_CENTRAL_NODE_AUTH_FALSE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_CENTRAL_NODE_AUTH_FALSE 0\n")),Object(i.b)("h3",{id:"define-zts_central_node_auth_true"},"define ZTS_CENTRAL_NODE_AUTH_TRUE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_CENTRAL_NODE_AUTH_TRUE 1\n")),Object(i.b)("h3",{id:"define-zts_central_read"},"define ZTS_CENTRAL_READ"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_CENTRAL_READ 1\n")),Object(i.b)("h3",{id:"define-zts_central_write"},"define ZTS_CENTRAL_WRITE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_CENTRAL_WRITE 2\n")),Object(i.b)("h3",{id:"define-zts_id_str_buf_len"},"define ZTS_ID_STR_BUF_LEN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_ID_STR_BUF_LEN 384\n")),Object(i.b)("p",null,"The length of a human-friendly identity key pair string "),Object(i.b)("h3",{id:"define-zts_sol_socket"},"define ZTS_SOL_SOCKET"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SOL_SOCKET 0x0fff\n")),Object(i.b)("h3",{id:"define-zts_so_debug"},"define ZTS_SO_DEBUG"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_DEBUG 0x0001\n")),Object(i.b)("h3",{id:"define-zts_so_acceptconn"},"define ZTS_SO_ACCEPTCONN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_ACCEPTCONN 0x0002\n")),Object(i.b)("h3",{id:"define-zts_so_reuseaddr"},"define ZTS_SO_REUSEADDR"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_REUSEADDR 0x0004\n")),Object(i.b)("h3",{id:"define-zts_so_keepalive"},"define ZTS_SO_KEEPALIVE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_KEEPALIVE 0x0008\n")),Object(i.b)("h3",{id:"define-zts_so_dontroute"},"define ZTS_SO_DONTROUTE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_DONTROUTE 0x0010\n")),Object(i.b)("h3",{id:"define-zts_so_broadcast"},"define ZTS_SO_BROADCAST"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_BROADCAST 0x0020\n")),Object(i.b)("h3",{id:"define-zts_so_useloopback"},"define ZTS_SO_USELOOPBACK"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_USELOOPBACK 0x0040\n")),Object(i.b)("h3",{id:"define-zts_so_linger"},"define ZTS_SO_LINGER"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_LINGER 0x0080\n")),Object(i.b)("h3",{id:"define-zts_so_dontlinger"},"define ZTS_SO_DONTLINGER"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_DONTLINGER ((int)(~ZTS_SO_LINGER))\n")),Object(i.b)("h3",{id:"define-zts_so_oobinline"},"define ZTS_SO_OOBINLINE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_OOBINLINE 0x0100\n")),Object(i.b)("h3",{id:"define-zts_so_reuseport"},"define ZTS_SO_REUSEPORT"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_REUSEPORT 0x0200\n")),Object(i.b)("h3",{id:"define-zts_so_sndbuf"},"define ZTS_SO_SNDBUF"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_SNDBUF 0x1001\n")),Object(i.b)("h3",{id:"define-zts_so_rcvbuf"},"define ZTS_SO_RCVBUF"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_RCVBUF 0x1002\n")),Object(i.b)("h3",{id:"define-zts_so_sndlowat"},"define ZTS_SO_SNDLOWAT"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_SNDLOWAT 0x1003\n")),Object(i.b)("h3",{id:"define-zts_so_rcvlowat"},"define ZTS_SO_RCVLOWAT"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_RCVLOWAT 0x1004\n")),Object(i.b)("h3",{id:"define-zts_so_sndtimeo"},"define ZTS_SO_SNDTIMEO"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_SNDTIMEO 0x1005\n")),Object(i.b)("h3",{id:"define-zts_so_rcvtimeo"},"define ZTS_SO_RCVTIMEO"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_RCVTIMEO 0x1006\n")),Object(i.b)("h3",{id:"define-zts_so_error"},"define ZTS_SO_ERROR"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_ERROR 0x1007\n")),Object(i.b)("h3",{id:"define-zts_so_type"},"define ZTS_SO_TYPE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_TYPE 0x1008\n")),Object(i.b)("h3",{id:"define-zts_so_contimeo"},"define ZTS_SO_CONTIMEO"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_CONTIMEO 0x1009\n")),Object(i.b)("h3",{id:"define-zts_so_no_check"},"define ZTS_SO_NO_CHECK"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_NO_CHECK 0x100a\n")),Object(i.b)("h3",{id:"define-zts_so_bindtodevice"},"define ZTS_SO_BINDTODEVICE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SO_BINDTODEVICE 0x100b\n")),Object(i.b)("h3",{id:"define-zts_ip_tos"},"define ZTS_IP_TOS"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IP_TOS 0x0001\n")),Object(i.b)("h3",{id:"define-zts_ip_ttl"},"define ZTS_IP_TTL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IP_TTL 0x0002\n")),Object(i.b)("h3",{id:"define-zts_ip_pktinfo"},"define ZTS_IP_PKTINFO"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IP_PKTINFO 0x0008\n")),Object(i.b)("h3",{id:"define-zts_tcp_nodelay"},"define ZTS_TCP_NODELAY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_TCP_NODELAY 0x0001\n")),Object(i.b)("h3",{id:"define-zts_tcp_keepalive"},"define ZTS_TCP_KEEPALIVE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_TCP_KEEPALIVE 0x0002\n")),Object(i.b)("h3",{id:"define-zts_tcp_keepidle"},"define ZTS_TCP_KEEPIDLE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_TCP_KEEPIDLE 0x0003\n")),Object(i.b)("h3",{id:"define-zts_tcp_keepintvl"},"define ZTS_TCP_KEEPINTVL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_TCP_KEEPINTVL 0x0004\n")),Object(i.b)("h3",{id:"define-zts_tcp_keepcnt"},"define ZTS_TCP_KEEPCNT"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_TCP_KEEPCNT 0x0005\n")),Object(i.b)("h3",{id:"define-zts_ipv6_checksum"},"define ZTS_IPV6_CHECKSUM"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPV6_CHECKSUM   0x0007 /* RFC3542: calculate and insert the ICMPv6 checksum for raw                            \\\n              sockets. */\n")),Object(i.b)("h3",{id:"define-zts_ipv6_v6only"},"define ZTS_IPV6_V6ONLY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPV6_V6ONLY     0x001b /* RFC3493: boolean control to restrict ZTS_AF_INET6 sockets to                         \\\n              IPv6 communications only. */\n")),Object(i.b)("h3",{id:"define-zts_udplite_send_cscov"},"define ZTS_UDPLITE_SEND_CSCOV"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_UDPLITE_SEND_CSCOV 0x01 /* sender checksum coverage */\n")),Object(i.b)("h3",{id:"define-zts_udplite_recv_cscov"},"define ZTS_UDPLITE_RECV_CSCOV"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_UDPLITE_RECV_CSCOV 0x02 /* minimal receiver checksum coverage */\n")),Object(i.b)("h3",{id:"define-zts_ip_multicast_ttl"},"define ZTS_IP_MULTICAST_TTL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IP_MULTICAST_TTL 5\n")),Object(i.b)("h3",{id:"define-zts_ip_multicast_if"},"define ZTS_IP_MULTICAST_IF"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IP_MULTICAST_IF 6\n")),Object(i.b)("h3",{id:"define-zts_ip_multicast_loop"},"define ZTS_IP_MULTICAST_LOOP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IP_MULTICAST_LOOP 7\n")),Object(i.b)("h3",{id:"define-zts_ip_add_membership"},"define ZTS_IP_ADD_MEMBERSHIP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IP_ADD_MEMBERSHIP 3\n")),Object(i.b)("h3",{id:"define-zts_ip_drop_membership"},"define ZTS_IP_DROP_MEMBERSHIP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IP_DROP_MEMBERSHIP 4\n")),Object(i.b)("h3",{id:"define-zts_ipv6_join_group"},"define ZTS_IPV6_JOIN_GROUP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPV6_JOIN_GROUP 12\n")),Object(i.b)("h3",{id:"define-zts_ipv6_add_membership"},"define ZTS_IPV6_ADD_MEMBERSHIP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPV6_ADD_MEMBERSHIP ZTS_IPV6_JOIN_GROUP\n")),Object(i.b)("h3",{id:"define-zts_ipv6_leave_group"},"define ZTS_IPV6_LEAVE_GROUP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPV6_LEAVE_GROUP 13\n")),Object(i.b)("h3",{id:"define-zts_ipv6_drop_membership"},"define ZTS_IPV6_DROP_MEMBERSHIP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPV6_DROP_MEMBERSHIP ZTS_IPV6_LEAVE_GROUP\n")),Object(i.b)("h3",{id:"define-zts_iptos_tos_mask"},"define ZTS_IPTOS_TOS_MASK"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_TOS_MASK 0x1E\n")),Object(i.b)("h3",{id:"define-zts_iptos_tos"},"define ZTS_IPTOS_TOS"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_TOS(\n    tos\n)\n((tos)&ZTS_IPTOS_TOS_MASK)\n")),Object(i.b)("h3",{id:"define-zts_iptos_lowdelay"},"define ZTS_IPTOS_LOWDELAY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_LOWDELAY 0x10\n")),Object(i.b)("h3",{id:"define-zts_iptos_throughput"},"define ZTS_IPTOS_THROUGHPUT"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_THROUGHPUT 0x08\n")),Object(i.b)("h3",{id:"define-zts_iptos_reliability"},"define ZTS_IPTOS_RELIABILITY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_RELIABILITY 0x04\n")),Object(i.b)("h3",{id:"define-zts_iptos_lowcost"},"define ZTS_IPTOS_LOWCOST"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_LOWCOST 0x02\n")),Object(i.b)("h3",{id:"define-zts_iptos_mincost"},"define ZTS_IPTOS_MINCOST"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_MINCOST ZTS_IPTOS_LOWCOST\n")),Object(i.b)("h3",{id:"define-zts_iptos_prec_mask"},"define ZTS_IPTOS_PREC_MASK"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_PREC_MASK 0xe0\n")),Object(i.b)("h3",{id:"define-zts_iptos_prec"},"define ZTS_IPTOS_PREC"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_PREC(\n    tos\n)\n((tos)&ZTS_IPTOS_PREC_MASK)\n")),Object(i.b)("h3",{id:"define-zts_iptos_prec_netcontrol"},"define ZTS_IPTOS_PREC_NETCONTROL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_PREC_NETCONTROL 0xe0\n")),Object(i.b)("h3",{id:"define-zts_iptos_prec_internetcontrol"},"define ZTS_IPTOS_PREC_INTERNETCONTROL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_PREC_INTERNETCONTROL 0xc0\n")),Object(i.b)("h3",{id:"define-zts_iptos_prec_critic_ecp"},"define ZTS_IPTOS_PREC_CRITIC_ECP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_PREC_CRITIC_ECP 0xa0\n")),Object(i.b)("h3",{id:"define-zts_iptos_prec_flashoverride"},"define ZTS_IPTOS_PREC_FLASHOVERRIDE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_PREC_FLASHOVERRIDE 0x80\n")),Object(i.b)("h3",{id:"define-zts_iptos_prec_flash"},"define ZTS_IPTOS_PREC_FLASH"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_PREC_FLASH 0x60\n")),Object(i.b)("h3",{id:"define-zts_iptos_prec_immediate"},"define ZTS_IPTOS_PREC_IMMEDIATE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_PREC_IMMEDIATE 0x40\n")),Object(i.b)("h3",{id:"define-zts_iptos_prec_priority"},"define ZTS_IPTOS_PREC_PRIORITY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_PREC_PRIORITY 0x20\n")),Object(i.b)("h3",{id:"define-zts_iptos_prec_routine"},"define ZTS_IPTOS_PREC_ROUTINE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_IPTOS_PREC_ROUTINE 0x00\n")),Object(i.b)("h3",{id:"define-lwip_socket_offset"},"define LWIP_SOCKET_OFFSET"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define LWIP_SOCKET_OFFSET 0\n")),Object(i.b)("h3",{id:"define-memp_num_netconn"},"define MEMP_NUM_NETCONN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define MEMP_NUM_NETCONN 1024\n")),Object(i.b)("h3",{id:"define-zts_fd_setsize"},"define ZTS_FD_SETSIZE"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_FD_SETSIZE MEMP_NUM_NETCONN\n")),Object(i.b)("h3",{id:"define-zts_fdsetsafeset"},"define ZTS_FDSETSAFESET"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_FDSETSAFESET(\n    n,\n    code\n)\n    do {                                                                                           \\\n        if (((n)-LWIP_SOCKET_OFFSET < MEMP_NUM_NETCONN) && (((int)(n)-LWIP_SOCKET_OFFSET) >= 0)) { \\\n            code;                                                                                  \\\n        }                                                                                          \\\n    } while (0)\n")),Object(i.b)("h3",{id:"define-zts_fdsetsafeget"},"define ZTS_FDSETSAFEGET"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_FDSETSAFEGET(\n    n,\n    code\n)\n    (((n)-LWIP_SOCKET_OFFSET < MEMP_NUM_NETCONN) && (((int)(n)-LWIP_SOCKET_OFFSET) >= 0) ? (code)  \\\n                                                                                         : 0)\n")),Object(i.b)("h3",{id:"define-zts_fd_set"},"define ZTS_FD_SET"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_FD_SET(\n    n,\n    p\n)\n    ZTS_FDSETSAFESET(                                                                              \\\n        n,                                                                                         \\\n        (p)->fd_bits[((n)-LWIP_SOCKET_OFFSET) / 8] |= (1 << (((n)-LWIP_SOCKET_OFFSET) & 7)))\n")),Object(i.b)("h3",{id:"define-zts_fd_clr"},"define ZTS_FD_CLR"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_FD_CLR(\n    n,\n    p\n)\n    ZTS_FDSETSAFESET(                                                                              \\\n        n,                                                                                         \\\n        (p)->fd_bits[((n)-LWIP_SOCKET_OFFSET) / 8] &= ~(1 << (((n)-LWIP_SOCKET_OFFSET) & 7)))\n")),Object(i.b)("h3",{id:"define-zts_fd_isset"},"define ZTS_FD_ISSET"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_FD_ISSET(\n    n,\n    p\n)\n    ZTS_FDSETSAFEGET(                                                                              \\\n        n,                                                                                         \\\n        (p)->fd_bits[((n)-LWIP_SOCKET_OFFSET) / 8] & (1 << (((n)-LWIP_SOCKET_OFFSET) & 7)))\n")),Object(i.b)("h3",{id:"define-zts_fd_zero"},"define ZTS_FD_ZERO"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_FD_ZERO(\n    p\n)\nmemset((void*)(p), 0, sizeof(*(p)))\n")),Object(i.b)("h3",{id:"define-zts_f_getfl"},"define ZTS_F_GETFL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_F_GETFL 0x0003\n")),Object(i.b)("h3",{id:"define-zts_f_setfl"},"define ZTS_F_SETFL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_F_SETFL 0x0004\n")),Object(i.b)("h3",{id:"define-zts_o_nonblock"},"define ZTS_O_NONBLOCK"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_O_NONBLOCK 1\n")),Object(i.b)("h3",{id:"define-zts_o_ndelay"},"define ZTS_O_NDELAY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_O_NDELAY ZTS_O_NONBLOCK\n")),Object(i.b)("h3",{id:"define-zts_o_rdonly"},"define ZTS_O_RDONLY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_O_RDONLY 2\n")),Object(i.b)("h3",{id:"define-zts_o_wronly"},"define ZTS_O_WRONLY"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_O_WRONLY 4\n")),Object(i.b)("h3",{id:"define-zts_o_rdwr"},"define ZTS_O_RDWR"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_O_RDWR (ZTS_O_RDONLY | ZTS_O_WRONLY)\n")),Object(i.b)("h3",{id:"define-zts_pollin"},"define ZTS_POLLIN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_POLLIN 0x001\n")),Object(i.b)("h3",{id:"define-zts_pollout"},"define ZTS_POLLOUT"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_POLLOUT 0x002\n")),Object(i.b)("h3",{id:"define-zts_pollerr"},"define ZTS_POLLERR"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_POLLERR 0x004\n")),Object(i.b)("h3",{id:"define-zts_pollnval"},"define ZTS_POLLNVAL"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_POLLNVAL 0x008\n")),Object(i.b)("h3",{id:"define-zts_pollrdnorm"},"define ZTS_POLLRDNORM"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_POLLRDNORM 0x010\n")),Object(i.b)("h3",{id:"define-zts_pollrdband"},"define ZTS_POLLRDBAND"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_POLLRDBAND 0x020\n")),Object(i.b)("h3",{id:"define-zts_pollpri"},"define ZTS_POLLPRI"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_POLLPRI 0x040\n")),Object(i.b)("h3",{id:"define-zts_pollwrnorm"},"define ZTS_POLLWRNORM"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_POLLWRNORM 0x080\n")),Object(i.b)("h3",{id:"define-zts_pollwrband"},"define ZTS_POLLWRBAND"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_POLLWRBAND 0x100\n")),Object(i.b)("h3",{id:"define-zts_pollhup"},"define ZTS_POLLHUP"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_POLLHUP 0x200\n")),Object(i.b)("h3",{id:"define-zts_msg_trunc"},"define ZTS_MSG_TRUNC"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MSG_TRUNC 0x04\n")),Object(i.b)("h3",{id:"define-zts_msg_ctrunc"},"define ZTS_MSG_CTRUNC"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_MSG_CTRUNC 0x08\n")),Object(i.b)("h3",{id:"define-zts_shut_rd"},"define ZTS_SHUT_RD"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SHUT_RD 0x0\n")),Object(i.b)("h3",{id:"define-zts_shut_wr"},"define ZTS_SHUT_WR"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SHUT_WR 0x1\n")),Object(i.b)("h3",{id:"define-zts_shut_rdwr"},"define ZTS_SHUT_RDWR"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define ZTS_SHUT_RDWR 0x2\n")),Object(i.b)("h3",{id:"define-h_addr"},"define h_addr"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#define h_addr h_addr_list[0] /* for backward compatibility */\n")),Object(i.b)("h2",{id:"source-code"},"Source code"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'/*\n * Copyright (c)2013-2021 ZeroTier, Inc.\n *\n * Use of this software is governed by the Business Source License included\n * in the LICENSE.TXT file in the project\'s root directory.\n *\n * Change Date: 2026-01-01\n *\n * On the date above, in accordance with the Business Source License, use\n * of this software will be governed by version 2.0 of the Apache License.\n */\n/****/\n\n#ifndef ZTS_SOCKETS_H\n#define ZTS_SOCKETS_H\n\n#ifdef __cplusplus\nextern "C" {\n#endif\n\n//----------------------------------------------------------------------------//\n// Error codes                                                                //\n//----------------------------------------------------------------------------//\n\ntypedef enum {\n    ZTS_ERR_OK = 0,\n    ZTS_ERR_SOCKET = -1,\n    ZTS_ERR_SERVICE = -2,\n    ZTS_ERR_ARG = -3,\n    ZTS_ERR_NO_RESULT = -4,\n    ZTS_ERR_GENERAL = -5\n} zts_error_t;\n\n//----------------------------------------------------------------------------//\n// Event codes                                                                //\n//----------------------------------------------------------------------------//\n\ntypedef enum {\n    ZTS_EVENT_NODE_UP = 200,\n\n    ZTS_EVENT_NODE_ONLINE = 201,\n\n    ZTS_EVENT_NODE_OFFLINE = 202,\n\n    ZTS_EVENT_NODE_DOWN = 203,\n\n    ZTS_EVENT_NODE_FATAL_ERROR = 204,\n\n    ZTS_EVENT_NETWORK_NOT_FOUND = 210,\n    ZTS_EVENT_NETWORK_CLIENT_TOO_OLD = 211,\n    ZTS_EVENT_NETWORK_REQ_CONFIG = 212,\n    ZTS_EVENT_NETWORK_OK = 213,\n    ZTS_EVENT_NETWORK_ACCESS_DENIED = 214,\n    ZTS_EVENT_NETWORK_READY_IP4 = 215,\n    ZTS_EVENT_NETWORK_READY_IP6 = 216,\n    ZTS_EVENT_NETWORK_READY_IP4_IP6 = 217,\n    ZTS_EVENT_NETWORK_DOWN = 218,\n    ZTS_EVENT_NETWORK_UPDATE = 219,\n\n    ZTS_EVENT_STACK_UP = 220,\n    ZTS_EVENT_STACK_DOWN = 221,\n\n    ZTS_EVENT_NETIF_UP = 230,\n    ZTS_EVENT_NETIF_DOWN = 231,\n    ZTS_EVENT_NETIF_REMOVED = 232,\n    ZTS_EVENT_NETIF_LINK_UP = 233,\n    ZTS_EVENT_NETIF_LINK_DOWN = 234,\n\n    ZTS_EVENT_PEER_DIRECT = 240,\n    ZTS_EVENT_PEER_RELAY = 241,\n    ZTS_EVENT_PEER_UNREACHABLE = 242,\n    ZTS_EVENT_PEER_PATH_DISCOVERED = 243,\n    ZTS_EVENT_PEER_PATH_DEAD = 244,\n\n    ZTS_EVENT_ROUTE_ADDED = 250,\n    ZTS_EVENT_ROUTE_REMOVED = 251,\n\n    ZTS_EVENT_ADDR_ADDED_IP4 = 260,\n    ZTS_EVENT_ADDR_REMOVED_IP4 = 261,\n    ZTS_EVENT_ADDR_ADDED_IP6 = 262,\n    ZTS_EVENT_ADDR_REMOVED_IP6 = 263,\n\n    ZTS_EVENT_STORE_IDENTITY_SECRET = 270,\n    ZTS_EVENT_STORE_IDENTITY_PUBLIC = 271,\n    ZTS_EVENT_STORE_PLANET = 272,\n    ZTS_EVENT_STORE_PEER = 273,\n    ZTS_EVENT_STORE_NETWORK = 274\n} zts_event_t;\n\n//----------------------------------------------------------------------------//\n// zts_errno Error codes                                                      //\n//----------------------------------------------------------------------------//\n\nextern int zts_errno;\n\ntypedef enum {\n    ZTS_EPERM = 1,\n    ZTS_ENOENT = 2,\n    ZTS_ESRCH = 3,\n    ZTS_EINTR = 4,\n    ZTS_EIO = 5,\n    ZTS_ENXIO = 6,\n    ZTS_EBADF = 9,\n    ZTS_EAGAIN = 11,\n    ZTS_EWOULDBLOCK = ZTS_EAGAIN,\n    ZTS_ENOMEM = 12,\n    ZTS_EACCES = 13,\n    ZTS_EFAULT = 14,\n    ZTS_EBUSY = 16,\n    ZTS_EEXIST = 17,\n    ZTS_ENODEV = 19,\n    ZTS_EINVAL = 22,\n    ZTS_ENFILE = 23,\n    ZTS_EMFILE = 24,\n    ZTS_ENOSYS = 38,\n    ZTS_ENOTSOCK = 88,\n    ZTS_EDESTADDRREQ = 89,\n    ZTS_EMSGSIZE = 90,\n    ZTS_EPROTOTYPE = 91,\n    ZTS_ENOPROTOOPT = 92,\n    ZTS_EPROTONOSUPPORT = 93,\n    ZTS_ESOCKTNOSUPPORT = 94,\n    ZTS_EOPNOTSUPP = 95,\n    ZTS_EPFNOSUPPORT = 96,\n    ZTS_EAFNOSUPPORT = 97,\n    ZTS_EADDRINUSE = 98,\n    ZTS_EADDRNOTAVAIL = 99,\n    ZTS_ENETDOWN = 100,\n    ZTS_ENETUNREACH = 101,\n    ZTS_ECONNABORTED = 103,\n    ZTS_ECONNRESET = 104,\n    ZTS_ENOBUFS = 105,\n    ZTS_EISCONN = 106,\n    ZTS_ENOTCONN = 107,\n    ZTS_ETIMEDOUT = 110,\n    ZTS_EHOSTUNREACH = 113,\n    ZTS_EALREADY = 114,\n    ZTS_EINPROGRESS = 115\n} zts_errno_t;\n\n//----------------------------------------------------------------------------//\n// Misc definitions                                                           //\n//----------------------------------------------------------------------------//\n\n#define ZTS_MAC_ADDRSTRLEN 18\n\n#define ZTS_INET_ADDRSTRLEN 16\n\n#define ZTS_INET6_ADDRSTRLEN 46\n\n#define ZTS_IP_MAX_STR_LEN ZTS_INET6_ADDRSTRLEN\n\n#define ZTS_STORE_DATA_LEN 4096\n\n#define ZTS_MAX_NETWORK_SHORT_NAME_LENGTH 127\n\n#define ZTS_MAX_NETWORK_ROUTES 32\n\n#define ZTS_MAX_ASSIGNED_ADDRESSES 16\n\n#define ZTS_MAX_PEER_NETWORK_PATHS 16\n\n#define ZTS_MAX_MULTICAST_SUBSCRIPTIONS 1024\n\n//----------------------------------------------------------------------------//\n// Misc                                                                       //\n//----------------------------------------------------------------------------//\n\n#if ! defined(ZTS_ENABLE_PYTHON) && ! defined(ZTS_ENABLE_PINVOKE)\n#define ZTS_C_API_ONLY 1\n#endif\n\n#if ! ZTS_NO_STDINT_H\n#include <stdint.h>\n#endif\n\n#if defined(_MSC_VER)\n#ifndef ssize_t\n// TODO: Should be SSIZE_T, would require lwIP patch\n// #include <BaseTsd.h>\n// typedef SSIZE_T ssize_t;\ntypedef int ssize_t;\n#endif\n#else\n#include <unistd.h>\n#endif\n\n#ifdef ZTS_ENABLE_PINVOKE\n// Used by P/INVOKE wrappers\ntypedef void (*CppCallback)(void* msg);\n#endif\n\n//----------------------------------------------------------------------------//\n// Common definitions and structures for interoperability between zts_* and   //\n// lwIP functions. Some of the code in the following section is a borrowed    //\n// from the lwIP codebase so that the user doesn\'t need to include headers    //\n// from that project in addition to the ZeroTier SDK headers. The license     //\n// applying to this code borrowed from lwIP is produced below and only        //\n// applies to the portions of code which are merely renamed versions of       //\n// their lwIP counterparts. The rest of the code in this C API file is        //\n// governed by the license text provided at the beginning of this file.       //\n//----------------------------------------------------------------------------//\n\n/*\n * Copyright (c) 2001-2004 Swedish Institute of Computer Science.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n * 3. The name of the author may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS\'\' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * This file is part of the lwIP TCP/IP stack.\n *\n * Author: Adam Dunkels <adam@sics.se>\n *\n */\n\n#define ZTS_IPADDR_NONE ((uint32_t)0xffffffffUL)\n#define ZTS_IPADDR_LOOPBACK ((uint32_t)0x7f000001UL)\n#define ZTS_IPADDR_ANY ((uint32_t)0x00000000UL)\n#define ZTS_IPADDR_BROADCAST ((uint32_t)0xffffffffUL)\n\n#define ZTS_INADDR_NONE ZTS_IPADDR_NONE\n#define ZTS_INADDR_LOOPBACK ZTS_IPADDR_LOOPBACK\n#define ZTS_INADDR_ANY ZTS_IPADDR_ANY\n#define ZTS_INADDR_BROADCAST ZTS_IPADDR_BROADCAST\n\n// Socket protocol types\n#define ZTS_SOCK_STREAM 0x0001\n#define ZTS_SOCK_DGRAM  0x0002\n#define ZTS_SOCK_RAW    0x0003\n// Socket family types\n#define ZTS_AF_UNSPEC 0x0000\n#define ZTS_AF_INET   0x0002\n#define ZTS_AF_INET6  0x000a\n#define ZTS_PF_INET   ZTS_AF_INET\n#define ZTS_PF_INET6  ZTS_AF_INET6\n#define ZTS_PF_UNSPEC ZTS_AF_UNSPEC\n// Protocol command types\n#define ZTS_IPPROTO_IP      0x0000\n#define ZTS_IPPROTO_ICMP    0x0001\n#define ZTS_IPPROTO_TCP     0x0006\n#define ZTS_IPPROTO_UDP     0x0011\n#define ZTS_IPPROTO_IPV6    0x0029\n#define ZTS_IPPROTO_ICMPV6  0x003a\n#define ZTS_IPPROTO_UDPLITE 0x0088\n#define ZTS_IPPROTO_RAW     0x00ff\n// send() and recv() flags\n#define ZTS_MSG_PEEK     0x0001\n#define ZTS_MSG_WAITALL  0x0002   // NOT YET SUPPORTED\n#define ZTS_MSG_OOB      0x0004   // NOT YET SUPPORTED\n#define ZTS_MSG_DONTWAIT 0x0008\n#define ZTS_MSG_MORE     0x0010\n\n// Macro\'s for defining ioctl() command values\n#define ZTS_IOCPARM_MASK 0x7fU\n#define ZTS_IOC_VOID     0x20000000UL\n#define ZTS_IOC_OUT      0x40000000UL\n#define ZTS_IOC_IN       0x80000000UL\n#define ZTS_IOC_INOUT    (ZTS_IOC_IN | ZTS_IOC_OUT)\n#define ZTS_IO(x, y)     (ZTS_IOC_VOID | ((x) << 8) | (y))\n#define ZTS_IOR(x, y, t)                                                                           \\\n    (ZTS_IOC_OUT | (((long)sizeof(t) & ZTS_IOCPARM_MASK) << 16) | ((x) << 8) | (y))\n#define ZTS_IOW(x, y, t)                                                                           \\\n    (ZTS_IOC_IN | (((long)sizeof(t) & ZTS_IOCPARM_MASK) << 16) | ((x) << 8) | (y))\n// ioctl() commands\n#define ZTS_FIONREAD ZTS_IOR(\'f\', 127, unsigned long)\n#define ZTS_FIONBIO  ZTS_IOW(\'f\', 126, unsigned long)\n\n//----------------------------------------------------------------------------//\n// Custom but still mostly standard socket interface structures               //\n//----------------------------------------------------------------------------//\n\ntypedef uint32_t zts_socklen_t;\ntypedef uint32_t zts_in_addr_t;\ntypedef uint16_t zts_in_port_t;\ntypedef uint8_t zts_sa_family_t;\n\nstruct zts_in_addr {\n#if defined(_WIN32)\n    zts_in_addr_t S_addr;\n#else\n    // A definition in winsock may conflict with s_addr\n    zts_in_addr_t s_addr;\n#endif\n};\n\nstruct zts_in6_addr {\n    union un {\n        uint32_t u32_addr[4];\n        uint8_t u8_addr[16];\n    } un;\n    //#define s6_addr  un.u8_addr\n};\n\nstruct zts_sockaddr_in {\n    uint8_t sin_len;\n    zts_sa_family_t sin_family;\n    zts_in_port_t sin_port;\n    struct zts_in_addr sin_addr;\n#define SIN_ZERO_LEN 8\n    char sin_zero[SIN_ZERO_LEN];\n};\n\nstruct zts_sockaddr_in6 {\n    uint8_t sin6_len;                // length of this structure\n    zts_sa_family_t sin6_family;     // ZTS_AF_INET6\n    zts_in_port_t sin6_port;         // Transport layer port #\n    uint32_t sin6_flowinfo;          // IPv6 flow information\n    struct zts_in6_addr sin6_addr;   // IPv6 address\n    uint32_t sin6_scope_id;          // Set of interfaces for scope\n};\n\nstruct zts_sockaddr {\n    uint8_t sa_len;\n    zts_sa_family_t sa_family;\n    char sa_data[14];\n};\n\nstruct zts_sockaddr_storage {\n    uint8_t s2_len;\n    zts_sa_family_t ss_family;\n    char s2_data1[2];\n    uint32_t s2_data2[3];\n    uint32_t s2_data3[3];\n};\n\n//----------------------------------------------------------------------------//\n// Callback Structures                                                        //\n//----------------------------------------------------------------------------//\n\ntypedef struct {\n    uint64_t node_id;\n\n    uint16_t port_primary;\n\n    uint16_t port_secondary;\n\n    uint16_t port_tertiary;\n\n    uint8_t ver_major;\n\n    uint8_t ver_minor;\n\n    uint8_t ver_rev;\n} zts_node_info_t;\n\ntypedef struct {\n    uint64_t net_id;\n    struct zts_sockaddr_storage addr;\n} zts_addr_info_t;\n\ntypedef enum {\n    ZTS_NETWORK_STATUS_REQUESTING_CONFIGURATION = 0,\n\n    ZTS_NETWORK_STATUS_OK = 1,\n\n    ZTS_NETWORK_STATUS_ACCESS_DENIED = 2,\n\n    ZTS_NETWORK_STATUS_NOT_FOUND = 3,\n\n    ZTS_NETWORK_STATUS_PORT_ERROR = 4,\n\n    ZTS_NETWORK_STATUS_CLIENT_TOO_OLD = 5\n} zts_network_status_t;\n\ntypedef enum {\n    ZTS_NETWORK_TYPE_PRIVATE = 0,\n\n    ZTS_NETWORK_TYPE_PUBLIC = 1\n} zts_net_info_type_t;\n\ntypedef struct {\n    struct zts_sockaddr_storage target;\n\n    struct zts_sockaddr_storage via;\n\n    uint16_t flags;\n\n    uint16_t metric;\n} zts_route_info_t;\n\ntypedef struct {\n    uint64_t mac;\n\n    unsigned long adi;\n} zts_multicast_group_t;\n\ntypedef enum {\n    ZTS_PEER_ROLE_LEAF = 0,\n    ZTS_PEER_ROLE_MOON = 1,\n    ZTS_PEER_ROLE_PLANET = 2\n} zts_peer_role_t;\n\ntypedef struct {\n    uint64_t net_id;\n\n    uint64_t mac;\n\n    char name[ZTS_MAX_NETWORK_SHORT_NAME_LENGTH + 1];\n\n    zts_network_status_t status;\n\n    zts_net_info_type_t type;\n\n    unsigned int mtu;\n\n    int dhcp;\n\n    int bridge;\n\n    int broadcast_enabled;\n\n    int port_error;\n\n    unsigned long netconf_rev;\n\n    unsigned int assigned_addr_count;\n\n    struct zts_sockaddr_storage assigned_addrs[ZTS_MAX_ASSIGNED_ADDRESSES];\n\n    unsigned int route_count;\n\n    zts_route_info_t routes[ZTS_MAX_NETWORK_ROUTES];\n\n    unsigned int multicast_sub_count;\n\n    struct {\n        uint64_t mac; /* MAC in lower 48 bits */\n        uint32_t adi; /* Additional distinguishing information, usually zero\n                         except for IPv4 ARP groups */\n    } multicast_subs[ZTS_MAX_MULTICAST_SUBSCRIPTIONS];\n} zts_net_info_t;\n\ntypedef struct {\n    struct zts_sockaddr_storage address;\n\n    uint64_t last_tx;\n\n    uint64_t last_rx;\n\n    uint64_t trusted_path_id;\n\n    float latency;\n\n    float unused_0;\n    float unused_1;\n    float unused_2;\n    float unused_3;\n    float unused_4;\n    uint64_t unused_5;\n    uint64_t unused_6;\n    float unused_7;\n\n    char* ifname;\n\n    int expired;\n\n    int preferred;\n} zts_path_t;\n\ntypedef struct {\n    uint64_t address;\n\n    int ver_major;\n\n    int ver_minor;\n\n    int ver_rev;\n\n    int latency;\n\n    zts_peer_role_t role;\n\n    unsigned int path_count;\n\n    int unused_0;\n\n    zts_path_t paths[ZTS_MAX_PEER_NETWORK_PATHS];\n} zts_peer_info_t;\n\ntypedef struct {\n    uint64_t net_id;\n\n    uint64_t mac;\n\n    int mtu;\n} zts_netif_info_t;\n\ntypedef struct {\n    int16_t event_code;\n    zts_node_info_t* node;\n    zts_net_info_t* network;\n    zts_netif_info_t* netif;\n    zts_route_info_t* route;\n    zts_peer_info_t* peer;\n    zts_addr_info_t* addr;\n    void* cache;\n    int len;\n} zts_event_msg_t;\n\n//----------------------------------------------------------------------------//\n// Python Bindings (Subset of regular socket API)                             //\n//----------------------------------------------------------------------------//\n\n#ifdef ZTS_ENABLE_PYTHON\n#include "Python.h"\n\nclass PythonDirectorCallbackClass {\n  public:\n    virtual void on_zerotier_event(zts_event_msg_t* msg);\n    virtual ~PythonDirectorCallbackClass() {};\n};\n\nextern PythonDirectorCallbackClass* _userEventCallback;\n\nint zts_py_bind(int fd, int family, int type, PyObject* addro);\n\nint zts_py_connect(int fd, int family, int type, PyObject* addro);\n\nPyObject* zts_py_accept(int fd);\n\nint zts_py_listen(int fd, int backlog);\n\nPyObject* zts_py_recv(int fd, int len, int flags);\n\nint zts_py_send(int fd, PyObject* buf, int flags);\n\nint zts_py_close(int fd);\n\nint zts_py_setblocking(int fd, int flag);\n\nint zts_py_getblocking(int fd);\n\n#endif   // ZTS_ENABLE_PYTHON\n\n//----------------------------------------------------------------------------//\n// ZeroTier Service and Network Controls                                      //\n//----------------------------------------------------------------------------//\n\n#if defined(_WIN32)\n#ifdef ADD_EXPORTS\n#define ZTS_API __declspec(dllexport)\n#else\n#define ZTS_API __declspec(dllimport)\n#endif\n#define ZTCALL __cdecl\n#else\n#define ZTS_API\n#define ZTCALL\n#endif\n\n//----------------------------------------------------------------------------//\n// Central API                                                                //\n//----------------------------------------------------------------------------//\n\n#ifndef ZTS_DISABLE_CENTRAL_API\n\n#define ZTS_CENTRAL_DEFAULT_URL         "https://my.zerotier.com"\n#define ZTS_CENRTAL_MAX_URL_LEN         128\n#define ZTS_CENTRAL_TOKEN_LEN           32\n#define ZTS_CENTRAL_RESP_BUF_DEFAULT_SZ (128 * 1024)\n\n#define ZTS_HTTP_GET    0\n#define ZTS_HTTP_POST   1\n#define ZTS_HTTP_DELETE 2\n\n#define ZTS_CENTRAL_NODE_AUTH_FALSE 0\n#define ZTS_CENTRAL_NODE_AUTH_TRUE  1\n\n#define ZTS_CENTRAL_READ  1\n#define ZTS_CENTRAL_WRITE 2\n\nZTS_API int ZTCALL zts_central_set_access_mode(int8_t modes);\n\nZTS_API int ZTCALL zts_central_set_verbose(int8_t is_verbose);\n\nZTS_API void ZTCALL zts_central_clear_resp_buf();\n\nZTS_API int ZTCALL\nzts_central_init(const char* url_str, const char* token_str, char* resp_buf, uint32_t buf_len);\n\nZTS_API void ZTCALL zts_central_cleanup();\n\nZTS_API int ZTCALL zts_central_get_last_resp_buf(char* dst, int len);\n\nZTS_API int ZTCALL zts_central_status_get(int* http_resp_code);\n\nZTS_API int ZTCALL zts_central_self_get(int* http_resp_code);\n\nZTS_API int ZTCALL zts_central_net_get(int* http_resp_code, uint64_t net_id);\n\nZTS_API int ZTCALL zts_central_net_update(int* http_resp_code, uint64_t net_id);\n\nZTS_API int ZTCALL zts_central_net_delete(int* http_resp_code, uint64_t net_id);\n\nZTS_API int ZTCALL zts_central_net_get_all(int* http_resp_code);\nZTS_API int ZTCALL zts_central_member_get(int* http_resp_code, uint64_t net_id, uint64_t node_id);\n\nZTS_API int ZTCALL\nzts_central_member_update(int* http_resp_code, uint64_t net_id, uint64_t node_id, char* post_data);\n\nZTS_API int ZTCALL\nzts_central_node_auth(int* http_resp_code, uint64_t net_id, uint64_t node_id, uint8_t is_authed);\n\nZTS_API int ZTCALL zts_central_net_get_members(int* http_resp_code, uint64_t net_id);\n\n#endif   // ZTS_DISABLE_CENTRAL_API\n\n//----------------------------------------------------------------------------//\n// Identity Management                                                        //\n//----------------------------------------------------------------------------//\n\n#define ZTS_ID_STR_BUF_LEN 384\n\nZTS_API int ZTCALL zts_id_new(char* key, uint16_t* key_buf_len);\n\nZTS_API int ZTCALL zts_id_pair_is_valid(const char* key, int len);\n\nZTS_API int ZTCALL zts_init_from_storage(const char* path);\n\nZTS_API int ZTCALL zts_init_from_memory(const char* key, uint16_t len);\n\n#ifdef ZTS_ENABLE_PYTHON\nZTS_API int ZTCALL zts_init_set_event_handler(PythonDirectorCallbackClass* callback);\n#endif\n#ifdef ZTS_ENABLE_PINVOKE\nZTS_API int ZTCALL zts_init_set_event_handler(CppCallback callback);\n#endif\n#ifdef ZTS_C_API_ONLY\nZTS_API int ZTCALL zts_init_set_event_handler(void (*callback)(void*));\n#endif\n\nZTS_API int ZTCALL zts_init_blacklist_if(const char* prefix, int len);\n\nZTS_API int ZTCALL zts_init_set_planet(const char* planet_data, int len);\n\nZTS_API int ZTCALL zts_init_set_port(unsigned short port);\n\nZTS_API int ZTCALL zts_init_allow_net_cache(int allowed);\n\nZTS_API int ZTCALL zts_init_allow_peer_cache(int allowed);\n\nZTS_API int ZTCALL zts_init_clear();\n\nZTS_API int ZTCALL zts_addr_is_assigned(uint64_t net_id, int family);\n\nZTS_API int ZTCALL zts_addr_get(uint64_t net_id, int family, struct zts_sockaddr_storage* addr);\n\nZTS_API int ZTCALL zts_addr_get_str(uint64_t net_id, int family, char* dst, int len);\n\nZTS_API int ZTCALL zts_addr_get_all(uint64_t net_id, struct zts_sockaddr_storage* addr, int* count);\n\nZTS_API int ZTCALL zts_addr_compute_6plane(\n    const uint64_t net_id,\n    const uint64_t node_id,\n    struct zts_sockaddr_storage* addr);\n\nZTS_API int ZTCALL zts_addr_compute_rfc4193(\n    const uint64_t net_id,\n    const uint64_t node_id,\n    struct zts_sockaddr_storage* addr);\n\nZTS_API int ZTCALL\nzts_addr_compute_rfc4193_str(uint64_t net_id, uint64_t node_id, char* dst, int len);\n\nZTS_API int ZTCALL\nzts_addr_compute_6plane_str(uint64_t net_id, uint64_t node_id, char* dst, int len);\n\nZTS_API uint64_t ZTCALL zts_net_compute_adhoc_id(uint16_t start_port, uint16_t end_port);\n\nZTS_API int ZTCALL zts_net_join(uint64_t net_id);\n\nZTS_API int ZTCALL zts_net_leave(uint64_t net_id);\n\nZTS_API int ZTCALL zts_net_count();\n\nZTS_API uint64_t ZTCALL zts_net_get_mac(uint64_t net_id);\n\nZTS_API int ZTCALL zts_net_get_mac_str(uint64_t net_id, char* dst, int len);\n\nZTS_API int ZTCALL zts_net_get_broadcast(uint64_t net_id);\n\nZTS_API int ZTCALL zts_net_get_mtu(uint64_t net_id);\n\nZTS_API int ZTCALL zts_net_get_name(uint64_t net_id, char* dst, int len);\n\nZTS_API int ZTCALL zts_net_get_status(uint64_t net_id);\n\nZTS_API int ZTCALL zts_net_get_type(uint64_t net_id);\n\nZTS_API int ZTCALL zts_route_is_assigned(uint64_t net_id, int family);\n\nZTS_API int ZTCALL zts_node_start();\n\nZTS_API int ZTCALL zts_node_is_online();\n\nZTS_API uint64_t ZTCALL zts_node_get_id();\n\nZTS_API int ZTCALL zts_node_get_id_pair(char* key, uint16_t* key_buf_len);\n\nZTS_API int ZTCALL zts_node_get_port();\n\nZTS_API int ZTCALL zts_node_stop();\n\nZTS_API int ZTCALL zts_node_restart();\n\nZTS_API int ZTCALL zts_node_free();\n\nZTS_API int ZTCALL zts_moon_orbit(uint64_t moon_world_id, uint64_t moon_seed);\n\nZTS_API int ZTCALL zts_moon_deorbit(uint64_t moon_world_id);\n\n//----------------------------------------------------------------------------//\n// Statistics                                                                 //\n//----------------------------------------------------------------------------//\n\ntypedef struct {\n    uint32_t link_tx;\n    uint32_t link_rx;\n    uint32_t link_drop;\n    uint32_t link_err;\n\n    uint32_t etharp_tx;\n    uint32_t etharp_rx;\n    uint32_t etharp_drop;\n    uint32_t etharp_err;\n\n    uint32_t ip4_tx;\n    uint32_t ip4_rx;\n    uint32_t ip4_drop;\n    uint32_t ip4_err;\n\n    uint32_t ip6_tx;\n    uint32_t ip6_rx;\n    uint32_t ip6_drop;\n    uint32_t ip6_err;\n\n    uint32_t icmp4_tx;\n    uint32_t icmp4_rx;\n    uint32_t icmp4_drop;\n    uint32_t icmp4_err;\n\n    uint32_t icmp6_tx;\n    uint32_t icmp6_rx;\n    uint32_t icmp6_drop;\n    uint32_t icmp6_err;\n\n    uint32_t udp_tx;\n    uint32_t udp_rx;\n    uint32_t udp_drop;\n    uint32_t udp_err;\n\n    uint32_t tcp_tx;\n    uint32_t tcp_rx;\n    uint32_t tcp_drop;\n    uint32_t tcp_err;\n\n    uint32_t nd6_tx;\n    uint32_t nd6_rx;\n    uint32_t nd6_drop;\n    uint32_t nd6_err;\n} zts_stats_counter_t;\n\nZTS_API int ZTCALL zts_stats_get_all(zts_stats_counter_t* dst);\n\n//----------------------------------------------------------------------------//\n// Socket API                                                                 //\n//----------------------------------------------------------------------------//\n\nZTS_API int ZTCALL zts_socket(int family, int type, int protocol);\n\nZTS_API int ZTCALL zts_connect(int fd, const struct zts_sockaddr* addr, zts_socklen_t addrlen);\n\nZTS_API int ZTCALL zts_simple_connect(int fd, const char* ipstr, int port, int timeout_ms);\n\nZTS_API int ZTCALL zts_bind(int fd, const struct zts_sockaddr* addr, zts_socklen_t addrlen);\n\nZTS_API int ZTCALL zts_simple_bind(int fd, const char* ipstr, int port);\n\nZTS_API int ZTCALL zts_listen(int fd, int backlog);\n\nZTS_API int ZTCALL zts_accept(int fd, struct zts_sockaddr* addr, zts_socklen_t* addrlen);\n\nZTS_API int ZTCALL zts_simple_accept(int fd, char* remote_addr, int len, int* port);\n\nZTS_API int ZTCALL zts_simple_tcp_client(const char* remote_ipstr, int remote_port);\n\nZTS_API int ZTCALL zts_simple_tcp_server(\n    const char* local_ipstr,\n    int local_port,\n    char* remote_ipstr,\n    int len,\n    int* remote_port);\n\nZTS_API int ZTCALL zts_simple_udp_server(const char* local_ipstr, int local_port);\n\nZTS_API int ZTCALL zts_simple_udp_client(const char* remote_ipstr);\n\n// Socket level option number\n#define ZTS_SOL_SOCKET 0x0fff\n// Socket options\n#define ZTS_SO_DEBUG       0x0001   // NOT YET SUPPORTED\n#define ZTS_SO_ACCEPTCONN  0x0002\n#define ZTS_SO_REUSEADDR   0x0004\n#define ZTS_SO_KEEPALIVE   0x0008\n#define ZTS_SO_DONTROUTE   0x0010   // NOT YET SUPPORTED\n#define ZTS_SO_BROADCAST   0x0020\n#define ZTS_SO_USELOOPBACK 0x0040   // NOT YET SUPPORTED\n#define ZTS_SO_LINGER      0x0080\n\n/*\n * Structure used for manipulating linger option.\n */\nstruct zts_linger {\n    int l_onoff;    // option on/off\n    int l_linger;   // linger time in seconds\n};\n\n#define ZTS_SO_DONTLINGER   ((int)(~ZTS_SO_LINGER))\n#define ZTS_SO_OOBINLINE    0x0100   // NOT YET SUPPORTED\n#define ZTS_SO_REUSEPORT    0x0200   // NOT YET SUPPORTED\n#define ZTS_SO_SNDBUF       0x1001   // NOT YET SUPPORTED\n#define ZTS_SO_RCVBUF       0x1002\n#define ZTS_SO_SNDLOWAT     0x1003   // NOT YET SUPPORTED\n#define ZTS_SO_RCVLOWAT     0x1004   // NOT YET SUPPORTED\n#define ZTS_SO_SNDTIMEO     0x1005\n#define ZTS_SO_RCVTIMEO     0x1006\n#define ZTS_SO_ERROR        0x1007\n#define ZTS_SO_TYPE         0x1008\n#define ZTS_SO_CONTIMEO     0x1009\n#define ZTS_SO_NO_CHECK     0x100a\n#define ZTS_SO_BINDTODEVICE 0x100b\n// IPPROTO_IP options\n#define ZTS_IP_TOS     0x0001\n#define ZTS_IP_TTL     0x0002\n#define ZTS_IP_PKTINFO 0x0008\n// IPPROTO_TCP options\n#define ZTS_TCP_NODELAY   0x0001\n#define ZTS_TCP_KEEPALIVE 0x0002\n#define ZTS_TCP_KEEPIDLE  0x0003\n#define ZTS_TCP_KEEPINTVL 0x0004\n#define ZTS_TCP_KEEPCNT   0x0005\n// IPPROTO_IPV6 options\n#define ZTS_IPV6_CHECKSUM                                                                          \\\n    0x0007 /* RFC3542: calculate and insert the ICMPv6 checksum for raw                            \\\n              sockets. */\n#define ZTS_IPV6_V6ONLY                                                                            \\\n    0x001b /* RFC3493: boolean control to restrict ZTS_AF_INET6 sockets to                         \\\n              IPv6 communications only. */\n// UDPLITE options\n#define ZTS_UDPLITE_SEND_CSCOV 0x01 /* sender checksum coverage */\n#define ZTS_UDPLITE_RECV_CSCOV 0x02 /* minimal receiver checksum coverage */\n// UDPLITE options\n#define ZTS_IP_MULTICAST_TTL  5\n#define ZTS_IP_MULTICAST_IF   6\n#define ZTS_IP_MULTICAST_LOOP 7\n\n// Multicast options\n#define ZTS_IP_ADD_MEMBERSHIP  3\n#define ZTS_IP_DROP_MEMBERSHIP 4\n\ntypedef struct zts_ip_mreq {\n    struct zts_in_addr imr_multiaddr; /* IP multicast address of group */\n    struct zts_in_addr imr_interface; /* local IP address of interface */\n} zts_ip_mreq;\n\nstruct zts_in_pktinfo {\n    unsigned int ipi_ifindex;    /* Interface index */\n    struct zts_in_addr ipi_addr; /* Destination (from header) address */\n};\n\n#define ZTS_IPV6_JOIN_GROUP      12\n#define ZTS_IPV6_ADD_MEMBERSHIP  ZTS_IPV6_JOIN_GROUP\n#define ZTS_IPV6_LEAVE_GROUP     13\n#define ZTS_IPV6_DROP_MEMBERSHIP ZTS_IPV6_LEAVE_GROUP\n\ntypedef struct zts_ipv6_mreq {\n    struct zts_in6_addr ipv6mr_multiaddr; /*  IPv6 multicast addr */\n    unsigned int ipv6mr_interface;        /*  interface index, or 0 */\n} zts_ipv6_mreq;\n\n/*\n * The Type of Service provides an indication of the abstract\n * parameters of the quality of service desired.  These parameters are\n * to be used to guide the selection of the actual service parameters\n * when transmitting a datagram through a particular network.  Several\n * networks offer service precedence, which somehow treats high\n * precedence traffic as more important than other traffic (generally\n * by accepting only traffic above a certain precedence at time of high\n * load).  The major choice is a three way tradeoff between low-delay,\n * high-reliability, and high-throughput.\n * The use of the Delay, Throughput, and Reliability indications may\n * increase the cost (in some sense) of the service.  In many networks\n * better performance for one of these parameters is coupled with worse\n * performance on another.  Except for very unusual cases at most two\n * of these three indications should be set.\n */\n#define ZTS_IPTOS_TOS_MASK    0x1E\n#define ZTS_IPTOS_TOS(tos)    ((tos)&ZTS_IPTOS_TOS_MASK)\n#define ZTS_IPTOS_LOWDELAY    0x10\n#define ZTS_IPTOS_THROUGHPUT  0x08\n#define ZTS_IPTOS_RELIABILITY 0x04\n#define ZTS_IPTOS_LOWCOST     0x02\n#define ZTS_IPTOS_MINCOST     ZTS_IPTOS_LOWCOST\n\n/*\n * The Network Control precedence designation is intended to be used\n * within a network only.  The actual use and control of that\n * designation is up to each network. The Internetwork Control\n * designation is intended for use by gateway control originators only.\n * If the actual use of these precedence designations is of concern to\n * a particular network, it is the responsibility of that network to\n * control the access to, and use of, those precedence designations.\n */\n#define ZTS_IPTOS_PREC_MASK            0xe0\n#define ZTS_IPTOS_PREC(tos)            ((tos)&ZTS_IPTOS_PREC_MASK)\n#define ZTS_IPTOS_PREC_NETCONTROL      0xe0\n#define ZTS_IPTOS_PREC_INTERNETCONTROL 0xc0\n#define ZTS_IPTOS_PREC_CRITIC_ECP      0xa0\n#define ZTS_IPTOS_PREC_FLASHOVERRIDE   0x80\n#define ZTS_IPTOS_PREC_FLASH           0x60\n#define ZTS_IPTOS_PREC_IMMEDIATE       0x40\n#define ZTS_IPTOS_PREC_PRIORITY        0x20\n#define ZTS_IPTOS_PREC_ROUTINE         0x00\n\nZTS_API int ZTCALL\nzts_setsockopt(int fd, int level, int optname, const void* optval, zts_socklen_t optlen);\n\nZTS_API int ZTCALL\nzts_getsockopt(int fd, int level, int optname, void* optval, zts_socklen_t* optlen);\n\nZTS_API int ZTCALL zts_getsockname(int fd, struct zts_sockaddr* addr, zts_socklen_t* addrlen);\n\nZTS_API int ZTCALL zts_getpeername(int fd, struct zts_sockaddr* addr, zts_socklen_t* addrlen);\n\nZTS_API int ZTCALL zts_close(int fd);\n\n/* FD_SET used for lwip_select */\n\n#define LWIP_SOCKET_OFFSET 0\n#define MEMP_NUM_NETCONN   1024\n\n#ifndef ZTS_FD_SET\n#undef ZTS_FD_SETSIZE\n// Make FD_SETSIZE match NUM_SOCKETS in socket.c\n#define ZTS_FD_SETSIZE MEMP_NUM_NETCONN\n#define ZTS_FDSETSAFESET(n, code)                                                                  \\\n    do {                                                                                           \\\n        if (((n)-LWIP_SOCKET_OFFSET < MEMP_NUM_NETCONN) && (((int)(n)-LWIP_SOCKET_OFFSET) >= 0)) { \\\n            code;                                                                                  \\\n        }                                                                                          \\\n    } while (0)\n#define ZTS_FDSETSAFEGET(n, code)                                                                  \\\n    (((n)-LWIP_SOCKET_OFFSET < MEMP_NUM_NETCONN) && (((int)(n)-LWIP_SOCKET_OFFSET) >= 0) ? (code)  \\\n                                                                                         : 0)\n#define ZTS_FD_SET(n, p)                                                                           \\\n    ZTS_FDSETSAFESET(                                                                              \\\n        n,                                                                                         \\\n        (p)->fd_bits[((n)-LWIP_SOCKET_OFFSET) / 8] |= (1 << (((n)-LWIP_SOCKET_OFFSET) & 7)))\n#define ZTS_FD_CLR(n, p)                                                                           \\\n    ZTS_FDSETSAFESET(                                                                              \\\n        n,                                                                                         \\\n        (p)->fd_bits[((n)-LWIP_SOCKET_OFFSET) / 8] &= ~(1 << (((n)-LWIP_SOCKET_OFFSET) & 7)))\n#define ZTS_FD_ISSET(n, p)                                                                         \\\n    ZTS_FDSETSAFEGET(                                                                              \\\n        n,                                                                                         \\\n        (p)->fd_bits[((n)-LWIP_SOCKET_OFFSET) / 8] & (1 << (((n)-LWIP_SOCKET_OFFSET) & 7)))\n#define ZTS_FD_ZERO(p) memset((void*)(p), 0, sizeof(*(p)))\n\n#elif LWIP_SOCKET_OFFSET\n#error LWIP_SOCKET_OFFSET does not work with external FD_SET!\n#elif ZTS_FD_SETSIZE < MEMP_NUM_NETCONN\n#error "external ZTS_FD_SETSIZE too small for number of sockets"\n#endif   // FD_SET\n\ntypedef struct zts_fd_set {\n    unsigned char fd_bits[(ZTS_FD_SETSIZE + 7) / 8];\n} zts_fd_set;\n\ntypedef struct zts_timeval {\n    long tv_sec;  /* seconds */\n    long tv_usec; /* and microseconds */\n} zts_timeval;\n\nZTS_API int ZTCALL zts_select(\n    int nfds,\n    zts_fd_set* readfds,\n    zts_fd_set* writefds,\n    zts_fd_set* exceptfds,\n    struct zts_timeval* timeout);\n\n// fnctl() commands\n#define ZTS_F_GETFL 0x0003\n#define ZTS_F_SETFL 0x0004\n/* File status flags and file access modes for fnctl,\n   these are bits in an int. */\n#define ZTS_O_NONBLOCK 1\n#define ZTS_O_NDELAY   ZTS_O_NONBLOCK\n#define ZTS_O_RDONLY   2\n#define ZTS_O_WRONLY   4\n#define ZTS_O_RDWR     (ZTS_O_RDONLY | ZTS_O_WRONLY)\n\nZTS_API int ZTCALL zts_fcntl(int fd, int cmd, int flags);\n\n#define ZTS_POLLIN   0x001\n#define ZTS_POLLOUT  0x002\n#define ZTS_POLLERR  0x004\n#define ZTS_POLLNVAL 0x008\n/* Below values are unimplemented */\n#define ZTS_POLLRDNORM 0x010\n#define ZTS_POLLRDBAND 0x020\n#define ZTS_POLLPRI    0x040\n#define ZTS_POLLWRNORM 0x080\n#define ZTS_POLLWRBAND 0x100\n#define ZTS_POLLHUP    0x200\n\ntypedef unsigned int zts_nfds_t;\n\nstruct zts_pollfd {\n    int fd;\n    short events;\n    short revents;\n};\n\nZTS_API int ZTCALL zts_poll(struct zts_pollfd* fds, zts_nfds_t nfds, int timeout);\n\nZTS_API int ZTCALL zts_ioctl(int fd, unsigned long request, void* argp);\n\nZTS_API ssize_t ZTCALL zts_send(int fd, const void* buf, size_t len, int flags);\n\nZTS_API ssize_t ZTCALL zts_sendto(\n    int fd,\n    const void* buf,\n    size_t len,\n    int flags,\n    const struct zts_sockaddr* addr,\n    zts_socklen_t addrlen);\n\nstruct zts_iovec {\n    void* iov_base;\n    size_t iov_len;\n};\n\n/* */\nstruct zts_msghdr {\n    void* msg_name;\n    zts_socklen_t msg_namelen;\n    struct zts_iovec* msg_iov;\n    int msg_iovlen;\n    void* msg_control;\n    zts_socklen_t msg_controllen;\n    int msg_flags;\n};\n\n/* struct msghdr->msg_flags bit field values */\n#define ZTS_MSG_TRUNC  0x04\n#define ZTS_MSG_CTRUNC 0x08\n\nZTS_API ssize_t ZTCALL zts_sendmsg(int fd, const struct zts_msghdr* msg, int flags);\n\nZTS_API ssize_t ZTCALL zts_recv(int fd, void* buf, size_t len, int flags);\n\nZTS_API ssize_t ZTCALL zts_recvfrom(\n    int fd,\n    void* buf,\n    size_t len,\n    int flags,\n    struct zts_sockaddr* addr,\n    zts_socklen_t* addrlen);\n\nZTS_API ssize_t ZTCALL zts_recvmsg(int fd, struct zts_msghdr* msg, int flags);\n\nZTS_API ssize_t ZTCALL zts_read(int fd, void* buf, size_t len);\n\nZTS_API ssize_t ZTCALL zts_readv(int fd, const struct zts_iovec* iov, int iovcnt);\n\nZTS_API ssize_t ZTCALL zts_write(int fd, const void* buf, size_t len);\n\nZTS_API ssize_t ZTCALL zts_writev(int fd, const struct zts_iovec* iov, int iovcnt);\n\n#define ZTS_SHUT_RD   0x0\n#define ZTS_SHUT_WR   0x1\n#define ZTS_SHUT_RDWR 0x2\n\nZTS_API int ZTCALL zts_shutdown(int fd, int how);\n\n//----------------------------------------------------------------------------//\n// Convenience functions                                                      //\n//----------------------------------------------------------------------------//\n\nZTS_API int ZTCALL zts_simple_set_no_delay(int fd, int enabled);\n\nZTS_API int ZTCALL zts_simple_get_no_delay(int fd);\n\nZTS_API int ZTCALL zts_simple_set_linger(int fd, int enabled, int value);\n\nZTS_API int ZTCALL zts_simple_get_linger_enabled(int fd);\n\nZTS_API int ZTCALL zts_simple_get_linger_value(int fd);\n\nZTS_API int ZTCALL zts_simple_set_reuse_addr(int fd, int enabled);\n\nZTS_API int ZTCALL zts_simple_get_reuse_addr(int fd);\n\nZTS_API int ZTCALL zts_simple_set_recv_timeout(int fd, int seconds, int microseconds);\n\nZTS_API int ZTCALL zts_simple_get_recv_timeout(int fd);\n\nZTS_API int ZTCALL zts_simple_set_send_timeout(int fd, int seconds, int microseconds);\n\nZTS_API int ZTCALL zts_simple_get_send_timeout(int fd);\n\nZTS_API int ZTCALL zts_simple_set_send_buf_size(int fd, int size);\n\nZTS_API int ZTCALL zts_simple_get_send_buf_size(int fd);\n\nZTS_API int ZTCALL zts_simple_set_recv_buf_size(int fd, int size);\n\nZTS_API int ZTCALL zts_simple_get_recv_buf_size(int fd);\n\nZTS_API int ZTCALL zts_simple_set_ttl(int fd, int ttl);\n\nZTS_API int ZTCALL zts_simple_get_ttl(int fd);\n\nZTS_API int ZTCALL zts_simple_set_blocking(int fd, int enabled);\n\nZTS_API int ZTCALL zts_simple_get_blocking(int fd);\n\nZTS_API int ZTCALL zts_simple_set_keepalive(int fd, int enabled);\n\nZTS_API int ZTCALL zts_simple_get_keepalive(int fd);\n\n//----------------------------------------------------------------------------//\n// DNS                                                                        //\n//----------------------------------------------------------------------------//\n\nstruct zts_hostent {\n    char* h_name;             /* Official name of the host. */\n    char** h_aliases;         /* A pointer to an array of pointers to alternative host\n                                 names,   terminated by a null pointer. */\n    int h_addrtype;           /* Address type. */\n    int h_length;             /* The length, in bytes, of the address. */\n    char** h_addr_list;       /* A pointer to an array of pointers to network\n                                 addresses (in network byte order) for the host,\n                                 terminated by a null pointer. */\n#define h_addr h_addr_list[0] /* for backward compatibility */\n};\n\nstruct zts_hostent* zts_gethostbyname(const char* name);\n\nstruct zts_ip4_addr {\n    uint32_t addr;\n};\n\nstruct zts_ip6_addr {\n    uint32_t addr[4];\n#if LWIP_IPV6_SCOPES\n    uint8_t zone;\n#endif /* LWIP_IPV6_SCOPES */\n};\n\ntypedef struct zts_ip_addr {\n    union {\n        struct zts_ip6_addr ip6;\n        struct zts_ip4_addr ip4;\n    } u_addr;\n    uint8_t type;   // ZTS_IPADDR_TYPE_V4, ZTS_IPADDR_TYPE_V6\n} zts_ip_addr;\n\nZTS_API int ZTCALL zts_dns_set_server(uint8_t index, const zts_ip_addr* addr);\n\nZTS_API const zts_ip_addr* ZTCALL zts_dns_get_server(uint8_t index);\n\n//----------------------------------------------------------------------------//\n// Convenience functions pulled from lwIP                                     //\n//----------------------------------------------------------------------------//\n\nchar* zts_ipaddr_ntoa(const zts_ip_addr* addr);\n\nint zts_ipaddr_aton(const char* cp, zts_ip_addr* addr);\n\nZTS_API const char* ZTCALL\nzts_inet_ntop(int family, const void* src, char* dst, zts_socklen_t size);\n\nZTS_API int ZTCALL zts_inet_pton(int family, const char* src, void* dst);\n\n//----------------------------------------------------------------------------//\n// Utilities                                                                  //\n//----------------------------------------------------------------------------//\n\nZTS_API void ZTCALL zts_util_delay(long interval_ms);\n\nZTS_API int ZTCALL zts_util_get_ip_family(const char* ipstr);\n\nint zts_util_ipstr_to_saddr(\n    const char* src_ipstr,\n    int port,\n    struct zts_sockaddr* dstaddr,\n    zts_socklen_t* addrlen);\n\n#ifdef __cplusplus\n}   // extern "C"\n#endif\n\n#endif   // _H\n')),Object(i.b)("hr",null),Object(i.b)("p",null,"Updated on 22 April 2021 at 15:16:44 PDT"))}s.isMDXComponent=!0},156:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),s=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},o=function(e){var t=s(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,b=e.parentName,c=_(e,["components","mdxType","originalType","parentName"]),o=s(n),p=a,O=o["".concat(b,".").concat(p)]||o[p]||d[p]||i;return n?r.a.createElement(O,l(l({ref:t},c),{},{components:n})):r.a.createElement(O,l({ref:t},c))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,b=new Array(i);b[0]=p;var l={};for(var _ in t)hasOwnProperty.call(t,_)&&(l[_]=t[_]);l.originalType=e,l.mdxType="string"==typeof e?e:a,b[1]=l;for(var c=2;c<i;c++)b[c]=n[c];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);